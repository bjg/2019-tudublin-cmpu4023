// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  cust_hist: (where?: Cust_histWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  inventory: (where?: InventoryWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderline: (where?: OrderlineWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  reorder: (where?: ReorderWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryPromise;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Category>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnectionPromise;
  cust_hists: (
    args?: {
      where?: Cust_histWhereInput;
      orderBy?: Cust_histOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Cust_hist>;
  cust_histsConnection: (
    args?: {
      where?: Cust_histWhereInput;
      orderBy?: Cust_histOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Cust_histConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  customers: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Customer>;
  customersConnection: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CustomerConnectionPromise;
  inventory: (where: InventoryWhereUniqueInput) => InventoryPromise;
  inventories: (
    args?: {
      where?: InventoryWhereInput;
      orderBy?: InventoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Inventory>;
  inventoriesConnection: (
    args?: {
      where?: InventoryWhereInput;
      orderBy?: InventoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InventoryConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  orderline: (where: OrderlineWhereUniqueInput) => OrderlinePromise;
  orderlines: (
    args?: {
      where?: OrderlineWhereInput;
      orderBy?: OrderlineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Orderline>;
  orderlinesConnection: (
    args?: {
      where?: OrderlineWhereInput;
      orderBy?: OrderlineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderlineConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  reorder: (where: ReorderWhereUniqueInput) => ReorderPromise;
  reorders: (
    args?: {
      where?: ReorderWhereInput;
      orderBy?: ReorderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Reorder>;
  reordersConnection: (
    args?: {
      where?: ReorderWhereInput;
      orderBy?: ReorderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReorderConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => CategoryPromise;
  updateManyCategories: (
    args: { data: CategoryUpdateManyMutationInput; where?: CategoryWhereInput }
  ) => BatchPayloadPromise;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createCust_hist: (data: Cust_histCreateInput) => Cust_histPromise;
  deleteManyCust_hists: (where?: Cust_histWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (
    args: { data: CustomerUpdateInput; where: CustomerWhereUniqueInput }
  ) => CustomerPromise;
  updateManyCustomers: (
    args: { data: CustomerUpdateManyMutationInput; where?: CustomerWhereInput }
  ) => BatchPayloadPromise;
  upsertCustomer: (
    args: {
      where: CustomerWhereUniqueInput;
      create: CustomerCreateInput;
      update: CustomerUpdateInput;
    }
  ) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createInventory: (data: InventoryCreateInput) => InventoryPromise;
  updateInventory: (
    args: { data: InventoryUpdateInput; where: InventoryWhereUniqueInput }
  ) => InventoryPromise;
  updateManyInventories: (
    args: {
      data: InventoryUpdateManyMutationInput;
      where?: InventoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInventory: (
    args: {
      where: InventoryWhereUniqueInput;
      create: InventoryCreateInput;
      update: InventoryUpdateInput;
    }
  ) => InventoryPromise;
  deleteInventory: (where: InventoryWhereUniqueInput) => InventoryPromise;
  deleteManyInventories: (where?: InventoryWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderline: (data: OrderlineCreateInput) => OrderlinePromise;
  updateOrderline: (
    args: { data: OrderlineUpdateInput; where: OrderlineWhereUniqueInput }
  ) => OrderlinePromise;
  updateManyOrderlines: (
    args: {
      data: OrderlineUpdateManyMutationInput;
      where?: OrderlineWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOrderline: (
    args: {
      where: OrderlineWhereUniqueInput;
      create: OrderlineCreateInput;
      update: OrderlineUpdateInput;
    }
  ) => OrderlinePromise;
  deleteOrderline: (where: OrderlineWhereUniqueInput) => OrderlinePromise;
  deleteManyOrderlines: (where?: OrderlineWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createReorder: (data: ReorderCreateInput) => ReorderPromise;
  updateReorder: (
    args: { data: ReorderUpdateInput; where: ReorderWhereUniqueInput }
  ) => ReorderPromise;
  updateManyReorders: (
    args: { data: ReorderUpdateManyMutationInput; where?: ReorderWhereInput }
  ) => BatchPayloadPromise;
  upsertReorder: (
    args: {
      where: ReorderWhereUniqueInput;
      create: ReorderCreateInput;
      update: ReorderUpdateInput;
    }
  ) => ReorderPromise;
  deleteReorder: (where: ReorderWhereUniqueInput) => ReorderPromise;
  deleteManyReorders: (where?: ReorderWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  cust_hist: (
    where?: Cust_histSubscriptionWhereInput
  ) => Cust_histSubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  inventory: (
    where?: InventorySubscriptionWhereInput
  ) => InventorySubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderline: (
    where?: OrderlineSubscriptionWhereInput
  ) => OrderlineSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  reorder: (
    where?: ReorderSubscriptionWhereInput
  ) => ReorderSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Cust_histOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "address1_ASC"
  | "address1_DESC"
  | "address2_ASC"
  | "address2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "country_ASC"
  | "country_DESC"
  | "region_ASC"
  | "region_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "creditcardtype_ASC"
  | "creditcardtype_DESC"
  | "creditcard_ASC"
  | "creditcard_DESC"
  | "creditcardexpiration_ASC"
  | "creditcardexpiration_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "income_ASC"
  | "income_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InventoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quan_in_stock_ASC"
  | "quan_in_stock_DESC"
  | "sales_ASC"
  | "sales_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "orderdate_ASC"
  | "orderdate_DESC"
  | "netamount_ASC"
  | "netamount_DESC"
  | "tax_ASC"
  | "tax_DESC"
  | "totalamount_ASC"
  | "totalamount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderlineOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "orderdate_ASC"
  | "orderdate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "categoryname_ASC"
  | "categoryname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "actor_ASC"
  | "actor_DESC"
  | "price_ASC"
  | "price_DESC"
  | "special_ASC"
  | "special_DESC"
  | "common_prod_id_ASC"
  | "common_prod_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReorderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_low_ASC"
  | "date_low_DESC"
  | "quan_low_ASC"
  | "quan_low_DESC"
  | "date_reordered_ASC"
  | "date_reordered_DESC"
  | "quan_reordered_ASC"
  | "quan_reordered_DESC"
  | "date_expected_ASC"
  | "date_expected_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CategoryCreateInput {
  categoryname: String;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CustomerUpdateOneRequiredInput {
  create?: CustomerCreateInput;
  update?: CustomerUpdateDataInput;
  upsert?: CustomerUpsertNestedInput;
  connect?: CustomerWhereUniqueInput;
}

export interface OrderCreateOneInput {
  create?: OrderCreateInput;
  connect?: OrderWhereUniqueInput;
}

export type OrderlineWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CustomerCreateOneInput {
  create?: CustomerCreateInput;
  connect?: CustomerWhereUniqueInput;
}

export interface OrderUpdateInput {
  orderdate?: DateTimeInput;
  customer?: CustomerUpdateOneRequiredInput;
  netamount?: Float;
  tax?: Float;
  totalamount?: Float;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  orderdate?: DateTimeInput;
  orderdate_not?: DateTimeInput;
  orderdate_in?: DateTimeInput[] | DateTimeInput;
  orderdate_not_in?: DateTimeInput[] | DateTimeInput;
  orderdate_lt?: DateTimeInput;
  orderdate_lte?: DateTimeInput;
  orderdate_gt?: DateTimeInput;
  orderdate_gte?: DateTimeInput;
  customer?: CustomerWhereInput;
  netamount?: Float;
  netamount_not?: Float;
  netamount_in?: Float[] | Float;
  netamount_not_in?: Float[] | Float;
  netamount_lt?: Float;
  netamount_lte?: Float;
  netamount_gt?: Float;
  netamount_gte?: Float;
  tax?: Float;
  tax_not?: Float;
  tax_in?: Float[] | Float;
  tax_not_in?: Float[] | Float;
  tax_lt?: Float;
  tax_lte?: Float;
  tax_gt?: Float;
  tax_gte?: Float;
  totalamount?: Float;
  totalamount_not?: Float;
  totalamount_in?: Float[] | Float;
  totalamount_not_in?: Float[] | Float;
  totalamount_lt?: Float;
  totalamount_lte?: Float;
  totalamount_gt?: Float;
  totalamount_gte?: Float;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface OrderlineWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  order?: OrderWhereInput;
  product?: ProductWhereInput;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  orderdate?: DateTimeInput;
  orderdate_not?: DateTimeInput;
  orderdate_in?: DateTimeInput[] | DateTimeInput;
  orderdate_not_in?: DateTimeInput[] | DateTimeInput;
  orderdate_lt?: DateTimeInput;
  orderdate_lte?: DateTimeInput;
  orderdate_gt?: DateTimeInput;
  orderdate_gte?: DateTimeInput;
  AND?: OrderlineWhereInput[] | OrderlineWhereInput;
  OR?: OrderlineWhereInput[] | OrderlineWhereInput;
  NOT?: OrderlineWhereInput[] | OrderlineWhereInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface InventoryUpdateManyMutationInput {
  quan_in_stock?: Int;
  sales?: Int;
}

export interface OrderlineSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderlineWhereInput;
  AND?: OrderlineSubscriptionWhereInput[] | OrderlineSubscriptionWhereInput;
  OR?: OrderlineSubscriptionWhereInput[] | OrderlineSubscriptionWhereInput;
  NOT?: OrderlineSubscriptionWhereInput[] | OrderlineSubscriptionWhereInput;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface InventorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InventoryWhereInput;
  AND?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
  OR?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
  NOT?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
}

export interface CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface Cust_histSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Cust_histWhereInput;
  AND?: Cust_histSubscriptionWhereInput[] | Cust_histSubscriptionWhereInput;
  OR?: Cust_histSubscriptionWhereInput[] | Cust_histSubscriptionWhereInput;
  NOT?: Cust_histSubscriptionWhereInput[] | Cust_histSubscriptionWhereInput;
}

export interface CategoryUpdateDataInput {
  categoryname?: String;
}

export interface ReorderUpdateManyMutationInput {
  date_low?: DateTimeInput;
  quan_low?: Int;
  date_reordered?: DateTimeInput;
  quan_reordered?: Int;
  date_expected?: DateTimeInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  categoryname?: String;
  categoryname_not?: String;
  categoryname_in?: String[] | String;
  categoryname_not_in?: String[] | String;
  categoryname_lt?: String;
  categoryname_lte?: String;
  categoryname_gt?: String;
  categoryname_gte?: String;
  categoryname_contains?: String;
  categoryname_not_contains?: String;
  categoryname_starts_with?: String;
  categoryname_not_starts_with?: String;
  categoryname_ends_with?: String;
  categoryname_not_ends_with?: String;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface ProductUpdateManyMutationInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
}

export interface CategoryUpdateOneInput {
  create?: CategoryCreateInput;
  update?: CategoryUpdateDataInput;
  upsert?: CategoryUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CategoryWhereUniqueInput;
}

export interface OrderlineUpdateManyMutationInput {
  quantity?: Int;
  orderdate?: DateTimeInput;
}

export interface ProductUpdateDataInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
  category?: CategoryUpdateOneInput;
}

export interface OrderUpsertNestedInput {
  update: OrderUpdateDataInput;
  create: OrderCreateInput;
}

export interface ProductUpdateOneRequiredInput {
  create?: ProductCreateInput;
  update?: ProductUpdateDataInput;
  upsert?: ProductUpsertNestedInput;
  connect?: ProductWhereUniqueInput;
}

export interface OrderUpdateDataInput {
  orderdate?: DateTimeInput;
  customer?: CustomerUpdateOneRequiredInput;
  netamount?: Float;
  tax?: Float;
  totalamount?: Float;
}

export type ReorderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderlineUpdateInput {
  order?: OrderUpdateOneRequiredInput;
  product?: ProductUpdateOneRequiredInput;
  quantity?: Int;
  orderdate?: DateTimeInput;
}

export interface InventoryUpdateInput {
  quan_in_stock?: Int;
  sales?: Int;
  product?: ProductUpdateOneRequiredInput;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ReorderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  date_low?: DateTimeInput;
  date_low_not?: DateTimeInput;
  date_low_in?: DateTimeInput[] | DateTimeInput;
  date_low_not_in?: DateTimeInput[] | DateTimeInput;
  date_low_lt?: DateTimeInput;
  date_low_lte?: DateTimeInput;
  date_low_gt?: DateTimeInput;
  date_low_gte?: DateTimeInput;
  quan_low?: Int;
  quan_low_not?: Int;
  quan_low_in?: Int[] | Int;
  quan_low_not_in?: Int[] | Int;
  quan_low_lt?: Int;
  quan_low_lte?: Int;
  quan_low_gt?: Int;
  quan_low_gte?: Int;
  date_reordered?: DateTimeInput;
  date_reordered_not?: DateTimeInput;
  date_reordered_in?: DateTimeInput[] | DateTimeInput;
  date_reordered_not_in?: DateTimeInput[] | DateTimeInput;
  date_reordered_lt?: DateTimeInput;
  date_reordered_lte?: DateTimeInput;
  date_reordered_gt?: DateTimeInput;
  date_reordered_gte?: DateTimeInput;
  quan_reordered?: Int;
  quan_reordered_not?: Int;
  quan_reordered_in?: Int[] | Int;
  quan_reordered_not_in?: Int[] | Int;
  quan_reordered_lt?: Int;
  quan_reordered_lte?: Int;
  quan_reordered_gt?: Int;
  quan_reordered_gte?: Int;
  date_expected?: DateTimeInput;
  date_expected_not?: DateTimeInput;
  date_expected_in?: DateTimeInput[] | DateTimeInput;
  date_expected_not_in?: DateTimeInput[] | DateTimeInput;
  date_expected_lt?: DateTimeInput;
  date_expected_lte?: DateTimeInput;
  date_expected_gt?: DateTimeInput;
  date_expected_gte?: DateTimeInput;
  product?: ProductWhereInput;
  AND?: ReorderWhereInput[] | ReorderWhereInput;
  OR?: ReorderWhereInput[] | ReorderWhereInput;
  NOT?: ReorderWhereInput[] | ReorderWhereInput;
}

export interface CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput;
  create: CustomerCreateInput;
}

export interface InventoryCreateInput {
  quan_in_stock: Int;
  sales: Int;
  product: ProductCreateOneInput;
}

export interface CustomerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstname?: String;
  firstname_not?: String;
  firstname_in?: String[] | String;
  firstname_not_in?: String[] | String;
  firstname_lt?: String;
  firstname_lte?: String;
  firstname_gt?: String;
  firstname_gte?: String;
  firstname_contains?: String;
  firstname_not_contains?: String;
  firstname_starts_with?: String;
  firstname_not_starts_with?: String;
  firstname_ends_with?: String;
  firstname_not_ends_with?: String;
  lastname?: String;
  lastname_not?: String;
  lastname_in?: String[] | String;
  lastname_not_in?: String[] | String;
  lastname_lt?: String;
  lastname_lte?: String;
  lastname_gt?: String;
  lastname_gte?: String;
  lastname_contains?: String;
  lastname_not_contains?: String;
  lastname_starts_with?: String;
  lastname_not_starts_with?: String;
  lastname_ends_with?: String;
  lastname_not_ends_with?: String;
  address1?: String;
  address1_not?: String;
  address1_in?: String[] | String;
  address1_not_in?: String[] | String;
  address1_lt?: String;
  address1_lte?: String;
  address1_gt?: String;
  address1_gte?: String;
  address1_contains?: String;
  address1_not_contains?: String;
  address1_starts_with?: String;
  address1_not_starts_with?: String;
  address1_ends_with?: String;
  address1_not_ends_with?: String;
  address2?: String;
  address2_not?: String;
  address2_in?: String[] | String;
  address2_not_in?: String[] | String;
  address2_lt?: String;
  address2_lte?: String;
  address2_gt?: String;
  address2_gte?: String;
  address2_contains?: String;
  address2_not_contains?: String;
  address2_starts_with?: String;
  address2_not_starts_with?: String;
  address2_ends_with?: String;
  address2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  zip?: Int;
  zip_not?: Int;
  zip_in?: Int[] | Int;
  zip_not_in?: Int[] | Int;
  zip_lt?: Int;
  zip_lte?: Int;
  zip_gt?: Int;
  zip_gte?: Int;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  region?: Int;
  region_not?: Int;
  region_in?: Int[] | Int;
  region_not_in?: Int[] | Int;
  region_lt?: Int;
  region_lte?: Int;
  region_gt?: Int;
  region_gte?: Int;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  creditcardtype?: Int;
  creditcardtype_not?: Int;
  creditcardtype_in?: Int[] | Int;
  creditcardtype_not_in?: Int[] | Int;
  creditcardtype_lt?: Int;
  creditcardtype_lte?: Int;
  creditcardtype_gt?: Int;
  creditcardtype_gte?: Int;
  creditcard?: String;
  creditcard_not?: String;
  creditcard_in?: String[] | String;
  creditcard_not_in?: String[] | String;
  creditcard_lt?: String;
  creditcard_lte?: String;
  creditcard_gt?: String;
  creditcard_gte?: String;
  creditcard_contains?: String;
  creditcard_not_contains?: String;
  creditcard_starts_with?: String;
  creditcard_not_starts_with?: String;
  creditcard_ends_with?: String;
  creditcard_not_ends_with?: String;
  creditcardexpiration?: String;
  creditcardexpiration_not?: String;
  creditcardexpiration_in?: String[] | String;
  creditcardexpiration_not_in?: String[] | String;
  creditcardexpiration_lt?: String;
  creditcardexpiration_lte?: String;
  creditcardexpiration_gt?: String;
  creditcardexpiration_gte?: String;
  creditcardexpiration_contains?: String;
  creditcardexpiration_not_contains?: String;
  creditcardexpiration_starts_with?: String;
  creditcardexpiration_not_starts_with?: String;
  creditcardexpiration_ends_with?: String;
  creditcardexpiration_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  income?: Int;
  income_not?: Int;
  income_in?: Int[] | Int;
  income_not_in?: Int[] | Int;
  income_lt?: Int;
  income_lte?: Int;
  income_gt?: Int;
  income_gte?: Int;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  AND?: CustomerWhereInput[] | CustomerWhereInput;
  OR?: CustomerWhereInput[] | CustomerWhereInput;
  NOT?: CustomerWhereInput[] | CustomerWhereInput;
}

export interface CustomerUpdateManyMutationInput {
  firstname?: String;
  lastname?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  country?: String;
  region?: Int;
  email?: String;
  phone?: String;
  creditcardtype?: Int;
  creditcard?: String;
  creditcardexpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Int;
  gender?: String;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  actor?: String;
  actor_not?: String;
  actor_in?: String[] | String;
  actor_not_in?: String[] | String;
  actor_lt?: String;
  actor_lte?: String;
  actor_gt?: String;
  actor_gte?: String;
  actor_contains?: String;
  actor_not_contains?: String;
  actor_starts_with?: String;
  actor_not_starts_with?: String;
  actor_ends_with?: String;
  actor_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  special?: Int;
  special_not?: Int;
  special_in?: Int[] | Int;
  special_not_in?: Int[] | Int;
  special_lt?: Int;
  special_lte?: Int;
  special_gt?: Int;
  special_gte?: Int;
  common_prod_id?: Int;
  common_prod_id_not?: Int;
  common_prod_id_in?: Int[] | Int;
  common_prod_id_not_in?: Int[] | Int;
  common_prod_id_lt?: Int;
  common_prod_id_lte?: Int;
  common_prod_id_gt?: Int;
  common_prod_id_gte?: Int;
  category?: CategoryWhereInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface CustomerUpdateInput {
  firstname?: String;
  lastname?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  country?: String;
  region?: Int;
  email?: String;
  phone?: String;
  creditcardtype?: Int;
  creditcard?: String;
  creditcardexpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Int;
  gender?: String;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CustomerWhereInput;
  AND?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  OR?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  NOT?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
}

export interface CategoryCreateOneInput {
  create?: CategoryCreateInput;
  connect?: CategoryWhereUniqueInput;
}

export interface ReorderUpdateInput {
  date_low?: DateTimeInput;
  quan_low?: Int;
  date_reordered?: DateTimeInput;
  quan_reordered?: Int;
  date_expected?: DateTimeInput;
  product?: ProductUpdateOneRequiredInput;
}

export interface ProductUpdateInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
  category?: CategoryUpdateOneInput;
}

export interface InventoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  quan_in_stock?: Int;
  quan_in_stock_not?: Int;
  quan_in_stock_in?: Int[] | Int;
  quan_in_stock_not_in?: Int[] | Int;
  quan_in_stock_lt?: Int;
  quan_in_stock_lte?: Int;
  quan_in_stock_gt?: Int;
  quan_in_stock_gte?: Int;
  sales?: Int;
  sales_not?: Int;
  sales_in?: Int[] | Int;
  sales_not_in?: Int[] | Int;
  sales_lt?: Int;
  sales_lte?: Int;
  sales_gt?: Int;
  sales_gte?: Int;
  product?: ProductWhereInput;
  AND?: InventoryWhereInput[] | InventoryWhereInput;
  OR?: InventoryWhereInput[] | InventoryWhereInput;
  NOT?: InventoryWhereInput[] | InventoryWhereInput;
}

export interface ProductCreateInput {
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
  category?: CategoryCreateOneInput;
}

export interface OrderlineCreateInput {
  order: OrderCreateOneInput;
  product: ProductCreateOneInput;
  quantity: Int;
  orderdate: DateTimeInput;
}

export interface CategoryUpdateInput {
  categoryname?: String;
}

export interface CustomerUpdateDataInput {
  firstname?: String;
  lastname?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  country?: String;
  region?: Int;
  email?: String;
  phone?: String;
  creditcardtype?: Int;
  creditcard?: String;
  creditcardexpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Int;
  gender?: String;
}

export interface CategoryUpdateManyMutationInput {
  categoryname?: String;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export interface ProductCreateOneInput {
  create?: ProductCreateInput;
  connect?: ProductWhereUniqueInput;
}

export interface ReorderCreateInput {
  date_low: DateTimeInput;
  quan_low: Int;
  date_reordered: DateTimeInput;
  quan_reordered: Int;
  date_expected: DateTimeInput;
  product: ProductCreateOneInput;
}

export interface CustomerCreateInput {
  firstname: String;
  lastname: String;
  address1: String;
  address2?: String;
  city: String;
  state?: String;
  zip?: Int;
  country: String;
  region: Int;
  email?: String;
  phone?: String;
  creditcardtype: Int;
  creditcard: String;
  creditcardexpiration: String;
  username: String;
  password: String;
  age?: Int;
  income?: Int;
  gender?: String;
}

export interface Cust_histWhereInput {
  customer?: CustomerWhereInput;
  order?: OrderWhereInput;
  product?: ProductWhereInput;
  AND?: Cust_histWhereInput[] | Cust_histWhereInput;
  OR?: Cust_histWhereInput[] | Cust_histWhereInput;
  NOT?: Cust_histWhereInput[] | Cust_histWhereInput;
}

export interface Cust_histCreateInput {
  customer: CustomerCreateOneInput;
  order: OrderCreateOneInput;
  product: ProductCreateOneInput;
}

export interface OrderCreateInput {
  orderdate: DateTimeInput;
  customer: CustomerCreateOneInput;
  netamount: Float;
  tax: Float;
  totalamount: Float;
}

export type InventoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface ReorderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReorderWhereInput;
  AND?: ReorderSubscriptionWhereInput[] | ReorderSubscriptionWhereInput;
  OR?: ReorderSubscriptionWhereInput[] | ReorderSubscriptionWhereInput;
  NOT?: ReorderSubscriptionWhereInput[] | ReorderSubscriptionWhereInput;
}

export interface OrderUpdateManyMutationInput {
  orderdate?: DateTimeInput;
  netamount?: Float;
  tax?: Float;
  totalamount?: Float;
}

export interface OrderUpdateOneRequiredInput {
  create?: OrderCreateInput;
  update?: OrderUpdateDataInput;
  upsert?: OrderUpsertNestedInput;
  connect?: OrderWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ReorderPreviousValues {
  id: ID_Output;
  date_low: DateTimeOutput;
  quan_low: Int;
  date_reordered: DateTimeOutput;
  quan_reordered: Int;
  date_expected: DateTimeOutput;
}

export interface ReorderPreviousValuesPromise
  extends Promise<ReorderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date_low: () => Promise<DateTimeOutput>;
  quan_low: () => Promise<Int>;
  date_reordered: () => Promise<DateTimeOutput>;
  quan_reordered: () => Promise<Int>;
  date_expected: () => Promise<DateTimeOutput>;
}

export interface ReorderPreviousValuesSubscription
  extends Promise<AsyncIterator<ReorderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date_low: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_low: () => Promise<AsyncIterator<Int>>;
  date_reordered: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_reordered: () => Promise<AsyncIterator<Int>>;
  date_expected: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ReorderConnection {
  pageInfo: PageInfo;
  edges: ReorderEdge[];
}

export interface ReorderConnectionPromise
  extends Promise<ReorderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReorderEdge>>() => T;
  aggregate: <T = AggregateReorderPromise>() => T;
}

export interface ReorderConnectionSubscription
  extends Promise<AsyncIterator<ReorderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReorderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReorderSubscription>() => T;
}

export interface AggregateReorder {
  count: Int;
}

export interface AggregateReorderPromise
  extends Promise<AggregateReorder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReorderSubscription
  extends Promise<AsyncIterator<AggregateReorder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Reorder {
  id: ID_Output;
  date_low: DateTimeOutput;
  quan_low: Int;
  date_reordered: DateTimeOutput;
  quan_reordered: Int;
  date_expected: DateTimeOutput;
}

export interface ReorderPromise extends Promise<Reorder>, Fragmentable {
  id: () => Promise<ID_Output>;
  date_low: () => Promise<DateTimeOutput>;
  quan_low: () => Promise<Int>;
  date_reordered: () => Promise<DateTimeOutput>;
  quan_reordered: () => Promise<Int>;
  date_expected: () => Promise<DateTimeOutput>;
  product: <T = ProductPromise>() => T;
}

export interface ReorderSubscription
  extends Promise<AsyncIterator<Reorder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date_low: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_low: () => Promise<AsyncIterator<Int>>;
  date_reordered: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_reordered: () => Promise<AsyncIterator<Int>>;
  date_expected: () => Promise<AsyncIterator<DateTimeOutput>>;
  product: <T = ProductSubscription>() => T;
}

export interface AggregateCust_hist {
  count: Int;
}

export interface AggregateCust_histPromise
  extends Promise<AggregateCust_hist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCust_histSubscription
  extends Promise<AsyncIterator<AggregateCust_hist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Cust_histEdge {
  node: Cust_hist;
  cursor: String;
}

export interface Cust_histEdgePromise
  extends Promise<Cust_histEdge>,
    Fragmentable {
  node: <T = Cust_histPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Cust_histEdgeSubscription
  extends Promise<AsyncIterator<Cust_histEdge>>,
    Fragmentable {
  node: <T = Cust_histSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderline {
  count: Int;
}

export interface AggregateOrderlinePromise
  extends Promise<AggregateOrderline>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderlineSubscription
  extends Promise<AsyncIterator<AggregateOrderline>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cust_histConnection {}

export interface Cust_histConnectionPromise
  extends Promise<Cust_histConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Cust_histEdge>>() => T;
  aggregate: <T = AggregateCust_histPromise>() => T;
}

export interface Cust_histConnectionSubscription
  extends Promise<AsyncIterator<Cust_histConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Cust_histEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCust_histSubscription>() => T;
}

export interface OrderlineConnection {
  pageInfo: PageInfo;
  edges: OrderlineEdge[];
}

export interface OrderlineConnectionPromise
  extends Promise<OrderlineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderlineEdge>>() => T;
  aggregate: <T = AggregateOrderlinePromise>() => T;
}

export interface OrderlineConnectionSubscription
  extends Promise<AsyncIterator<OrderlineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderlineEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderlineSubscription>() => T;
}

export interface Category {
  id: ID_Output;
  categoryname: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  categoryname: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryname: () => Promise<AsyncIterator<String>>;
}

export interface Orderline {
  id: ID_Output;
  quantity: Int;
  orderdate: DateTimeOutput;
}

export interface OrderlinePromise extends Promise<Orderline>, Fragmentable {
  id: () => Promise<ID_Output>;
  order: <T = OrderPromise>() => T;
  product: <T = ProductPromise>() => T;
  quantity: () => Promise<Int>;
  orderdate: () => Promise<DateTimeOutput>;
}

export interface OrderlineSubscription
  extends Promise<AsyncIterator<Orderline>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order: <T = OrderSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  categoryname: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  categoryname: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryname: () => Promise<AsyncIterator<String>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface Product {
  id: ID_Output;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Int>;
  common_prod_id: () => Promise<Int>;
  category: <T = CategoryPromise>() => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Int>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
  category: <T = CategorySubscription>() => T;
}

export interface InventoryEdge {
  node: Inventory;
  cursor: String;
}

export interface InventoryEdgePromise
  extends Promise<InventoryEdge>,
    Fragmentable {
  node: <T = InventoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InventoryEdgeSubscription
  extends Promise<AsyncIterator<InventoryEdge>>,
    Fragmentable {
  node: <T = InventorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Cust_histSubscriptionPayload {
  mutation: MutationType;
  node: Cust_hist;
  updatedFields: String[];
}

export interface Cust_histSubscriptionPayloadPromise
  extends Promise<Cust_histSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Cust_histPromise>() => T;
  updatedFields: () => Promise<String[]>;
}

export interface Cust_histSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Cust_histSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Cust_histSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Order {
  id: ID_Output;
  orderdate: DateTimeOutput;
  netamount: Float;
  tax: Float;
  totalamount: Float;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  orderdate: () => Promise<DateTimeOutput>;
  customer: <T = CustomerPromise>() => T;
  netamount: () => Promise<Float>;
  tax: () => Promise<Float>;
  totalamount: () => Promise<Float>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  customer: <T = CustomerSubscription>() => T;
  netamount: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface ReorderSubscriptionPayload {
  mutation: MutationType;
  node: Reorder;
  updatedFields: String[];
  previousValues: ReorderPreviousValues;
}

export interface ReorderSubscriptionPayloadPromise
  extends Promise<ReorderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReorderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReorderPreviousValuesPromise>() => T;
}

export interface ReorderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReorderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReorderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReorderPreviousValuesSubscription>() => T;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  address1: String;
  address2?: String;
  city: String;
  state?: String;
  zip?: Int;
  country: String;
  region: Int;
  email?: String;
  phone?: String;
  creditcardtype: Int;
  creditcard: String;
  creditcardexpiration: String;
  username: String;
  password: String;
  age?: Int;
  income?: Int;
  gender?: String;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<Int>;
  country: () => Promise<String>;
  region: () => Promise<Int>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  creditcardtype: () => Promise<Int>;
  creditcard: () => Promise<String>;
  creditcardexpiration: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  income: () => Promise<Int>;
  gender: () => Promise<String>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  creditcardtype: () => Promise<AsyncIterator<Int>>;
  creditcard: () => Promise<AsyncIterator<String>>;
  creditcardexpiration: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface Customer {
  id: ID_Output;
  firstname: String;
  lastname: String;
  address1: String;
  address2?: String;
  city: String;
  state?: String;
  zip?: Int;
  country: String;
  region: Int;
  email?: String;
  phone?: String;
  creditcardtype: Int;
  creditcard: String;
  creditcardexpiration: String;
  username: String;
  password: String;
  age?: Int;
  income?: Int;
  gender?: String;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<Int>;
  country: () => Promise<String>;
  region: () => Promise<Int>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  creditcardtype: () => Promise<Int>;
  creditcard: () => Promise<String>;
  creditcardexpiration: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  income: () => Promise<Int>;
  gender: () => Promise<String>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  creditcardtype: () => Promise<AsyncIterator<Int>>;
  creditcard: () => Promise<AsyncIterator<String>>;
  creditcardexpiration: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Int>;
  common_prod_id: () => Promise<Int>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Int>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
}

export interface InventorySubscriptionPayload {
  mutation: MutationType;
  node: Inventory;
  updatedFields: String[];
  previousValues: InventoryPreviousValues;
}

export interface InventorySubscriptionPayloadPromise
  extends Promise<InventorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InventoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InventoryPreviousValuesPromise>() => T;
}

export interface InventorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InventorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InventorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InventoryPreviousValuesSubscription>() => T;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface InventoryPreviousValues {
  id: ID_Output;
  quan_in_stock: Int;
  sales: Int;
}

export interface InventoryPreviousValuesPromise
  extends Promise<InventoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quan_in_stock: () => Promise<Int>;
  sales: () => Promise<Int>;
}

export interface InventoryPreviousValuesSubscription
  extends Promise<AsyncIterator<InventoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quan_in_stock: () => Promise<AsyncIterator<Int>>;
  sales: () => Promise<AsyncIterator<Int>>;
}

export interface InventoryConnection {
  pageInfo: PageInfo;
  edges: InventoryEdge[];
}

export interface InventoryConnectionPromise
  extends Promise<InventoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InventoryEdge>>() => T;
  aggregate: <T = AggregateInventoryPromise>() => T;
}

export interface InventoryConnectionSubscription
  extends Promise<AsyncIterator<InventoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InventoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInventorySubscription>() => T;
}

export interface Cust_hist {}

export interface Cust_histPromise extends Promise<Cust_hist>, Fragmentable {
  customer: <T = CustomerPromise>() => T;
  order: <T = OrderPromise>() => T;
  product: <T = ProductPromise>() => T;
}

export interface Cust_histSubscription
  extends Promise<AsyncIterator<Cust_hist>>,
    Fragmentable {
  customer: <T = CustomerSubscription>() => T;
  order: <T = OrderSubscription>() => T;
  product: <T = ProductSubscription>() => T;
}

export interface ReorderEdge {
  node: Reorder;
  cursor: String;
}

export interface ReorderEdgePromise extends Promise<ReorderEdge>, Fragmentable {
  node: <T = ReorderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReorderEdgeSubscription
  extends Promise<AsyncIterator<ReorderEdge>>,
    Fragmentable {
  node: <T = ReorderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderlineEdge {
  node: Orderline;
  cursor: String;
}

export interface OrderlineEdgePromise
  extends Promise<OrderlineEdge>,
    Fragmentable {
  node: <T = OrderlinePromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderlineEdgeSubscription
  extends Promise<AsyncIterator<OrderlineEdge>>,
    Fragmentable {
  node: <T = OrderlineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderlinePreviousValues {
  id: ID_Output;
  quantity: Int;
  orderdate: DateTimeOutput;
}

export interface OrderlinePreviousValuesPromise
  extends Promise<OrderlinePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  orderdate: () => Promise<DateTimeOutput>;
}

export interface OrderlinePreviousValuesSubscription
  extends Promise<AsyncIterator<OrderlinePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderlineSubscriptionPayload {
  mutation: MutationType;
  node: Orderline;
  updatedFields: String[];
  previousValues: OrderlinePreviousValues;
}

export interface OrderlineSubscriptionPayloadPromise
  extends Promise<OrderlineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderlinePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderlinePreviousValuesPromise>() => T;
}

export interface OrderlineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderlineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderlineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderlinePreviousValuesSubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderPreviousValues {
  id: ID_Output;
  orderdate: DateTimeOutput;
  netamount: Float;
  tax: Float;
  totalamount: Float;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderdate: () => Promise<DateTimeOutput>;
  netamount: () => Promise<Float>;
  tax: () => Promise<Float>;
  totalamount: () => Promise<Float>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  netamount: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Inventory {
  id: ID_Output;
  quan_in_stock: Int;
  sales: Int;
}

export interface InventoryPromise extends Promise<Inventory>, Fragmentable {
  id: () => Promise<ID_Output>;
  quan_in_stock: () => Promise<Int>;
  sales: () => Promise<Int>;
  product: <T = ProductPromise>() => T;
}

export interface InventorySubscription
  extends Promise<AsyncIterator<Inventory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quan_in_stock: () => Promise<AsyncIterator<Int>>;
  sales: () => Promise<AsyncIterator<Int>>;
  product: <T = ProductSubscription>() => T;
}

export interface AggregateInventory {
  count: Int;
}

export interface AggregateInventoryPromise
  extends Promise<AggregateInventory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInventorySubscription
  extends Promise<AsyncIterator<AggregateInventory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Inventory",
    embedded: false
  },
  {
    name: "Reorder",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Orderline",
    embedded: false
  },
  {
    name: "Cust_hist",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
