// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  inventory: (where?: InventoryWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderlines: (where?: OrderlinesWhereInput) => Promise<boolean>;
  products: (where?: ProductsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryPromise;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Category>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnectionPromise;
  inventory: (where: InventoryWhereUniqueInput) => InventoryPromise;
  inventories: (
    args?: {
      where?: InventoryWhereInput;
      orderBy?: InventoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Inventory>;
  inventoriesConnection: (
    args?: {
      where?: InventoryWhereInput;
      orderBy?: InventoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InventoryConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  orderlines: (where: OrderlinesWhereUniqueInput) => OrderlinesPromise;
  orderlineses: (
    args?: {
      where?: OrderlinesWhereInput;
      orderBy?: OrderlinesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Orderlines>;
  orderlinesesConnection: (
    args?: {
      where?: OrderlinesWhereInput;
      orderBy?: OrderlinesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderlinesConnectionPromise;
  products: (where: ProductsWhereUniqueInput) => ProductsPromise;
  productses: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Products>;
  productsesConnection: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => CategoryPromise;
  updateManyCategories: (
    args: { data: CategoryUpdateManyMutationInput; where?: CategoryWhereInput }
  ) => BatchPayloadPromise;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createInventory: (data: InventoryCreateInput) => InventoryPromise;
  updateInventory: (
    args: { data: InventoryUpdateInput; where: InventoryWhereUniqueInput }
  ) => InventoryPromise;
  updateManyInventories: (
    args: {
      data: InventoryUpdateManyMutationInput;
      where?: InventoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInventory: (
    args: {
      where: InventoryWhereUniqueInput;
      create: InventoryCreateInput;
      update: InventoryUpdateInput;
    }
  ) => InventoryPromise;
  deleteInventory: (where: InventoryWhereUniqueInput) => InventoryPromise;
  deleteManyInventories: (where?: InventoryWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderlines: (data: OrderlinesCreateInput) => OrderlinesPromise;
  updateOrderlines: (
    args: { data: OrderlinesUpdateInput; where: OrderlinesWhereUniqueInput }
  ) => OrderlinesPromise;
  updateManyOrderlineses: (
    args: {
      data: OrderlinesUpdateManyMutationInput;
      where?: OrderlinesWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOrderlines: (
    args: {
      where: OrderlinesWhereUniqueInput;
      create: OrderlinesCreateInput;
      update: OrderlinesUpdateInput;
    }
  ) => OrderlinesPromise;
  deleteOrderlines: (where: OrderlinesWhereUniqueInput) => OrderlinesPromise;
  deleteManyOrderlineses: (where?: OrderlinesWhereInput) => BatchPayloadPromise;
  createProducts: (data: ProductsCreateInput) => ProductsPromise;
  updateProducts: (
    args: { data: ProductsUpdateInput; where: ProductsWhereUniqueInput }
  ) => ProductsPromise;
  updateManyProductses: (
    args: { data: ProductsUpdateManyMutationInput; where?: ProductsWhereInput }
  ) => BatchPayloadPromise;
  upsertProducts: (
    args: {
      where: ProductsWhereUniqueInput;
      create: ProductsCreateInput;
      update: ProductsUpdateInput;
    }
  ) => ProductsPromise;
  deleteProducts: (where: ProductsWhereUniqueInput) => ProductsPromise;
  deleteManyProductses: (where?: ProductsWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  inventory: (
    where?: InventorySubscriptionWhereInput
  ) => InventorySubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderlines: (
    where?: OrderlinesSubscriptionWhereInput
  ) => OrderlinesSubscriptionPayloadSubscription;
  products: (
    where?: ProductsSubscriptionWhereInput
  ) => ProductsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type InventoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stock_quan_ASC"
  | "stock_quan_DESC"
  | "sales_ASC"
  | "sales_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "customer_ASC"
  | "customer_DESC"
  | "orderdate_ASC"
  | "orderdate_DESC"
  | "price_net_ASC"
  | "price_net_DESC"
  | "tax_ASC"
  | "tax_DESC"
  | "price_tot_ASC"
  | "price_tot_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "categoryname_ASC"
  | "categoryname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderlinesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "orderdate_ASC"
  | "orderdate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "actor_ASC"
  | "actor_DESC"
  | "price_ASC"
  | "price_DESC"
  | "special_ASC"
  | "special_DESC"
  | "common_prod_id_ASC"
  | "common_prod_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface InventoryUpdateInput {
  prod_id?: ProductsUpdateOneWithoutInventoryInput;
  stock_quan?: Int;
  sales?: Int;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ProductsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface InventoryCreateOneWithoutProd_idInput {
  create?: InventoryCreateWithoutProd_idInput;
  connect?: InventoryWhereUniqueInput;
}

export interface InventoryUpdateWithoutProd_idDataInput {
  stock_quan?: Int;
  sales?: Int;
}

export interface CategoryUpdateDataInput {
  categoryname?: String;
}

export interface InventoryUpdateOneWithoutProd_idInput {
  create?: InventoryCreateWithoutProd_idInput;
  update?: InventoryUpdateWithoutProd_idDataInput;
  upsert?: InventoryUpsertWithoutProd_idInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: InventoryWhereUniqueInput;
}

export interface OrderlinesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderlinesWhereInput;
  AND?: OrderlinesSubscriptionWhereInput[] | OrderlinesSubscriptionWhereInput;
  OR?: OrderlinesSubscriptionWhereInput[] | OrderlinesSubscriptionWhereInput;
  NOT?: OrderlinesSubscriptionWhereInput[] | OrderlinesSubscriptionWhereInput;
}

export interface ProductsUpdateDataInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
  category?: CategoryUpdateOneInput;
  inventory?: InventoryUpdateOneWithoutProd_idInput;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export interface ProductsUpdateOneInput {
  create?: ProductsCreateInput;
  update?: ProductsUpdateDataInput;
  upsert?: ProductsUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductsWhereUniqueInput;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface ProductsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  actor?: String;
  actor_not?: String;
  actor_in?: String[] | String;
  actor_not_in?: String[] | String;
  actor_lt?: String;
  actor_lte?: String;
  actor_gt?: String;
  actor_gte?: String;
  actor_contains?: String;
  actor_not_contains?: String;
  actor_starts_with?: String;
  actor_not_starts_with?: String;
  actor_ends_with?: String;
  actor_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  special?: Float;
  special_not?: Float;
  special_in?: Float[] | Float;
  special_not_in?: Float[] | Float;
  special_lt?: Float;
  special_lte?: Float;
  special_gt?: Float;
  special_gte?: Float;
  common_prod_id?: Int;
  common_prod_id_not?: Int;
  common_prod_id_in?: Int[] | Int;
  common_prod_id_not_in?: Int[] | Int;
  common_prod_id_lt?: Int;
  common_prod_id_lte?: Int;
  common_prod_id_gt?: Int;
  common_prod_id_gte?: Int;
  category?: CategoryWhereInput;
  inventory?: InventoryWhereInput;
  AND?: ProductsWhereInput[] | ProductsWhereInput;
  OR?: ProductsWhereInput[] | ProductsWhereInput;
  NOT?: ProductsWhereInput[] | ProductsWhereInput;
}

export interface ProductsUpdateInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
  category?: CategoryUpdateOneInput;
  inventory?: InventoryUpdateOneWithoutProd_idInput;
}

export interface CategoryCreateInput {
  categoryname: String;
}

export interface OrderUpsertWithoutOrderlineInput {
  update: OrderUpdateWithoutOrderlineDataInput;
  create: OrderCreateWithoutOrderlineInput;
}

export interface CategoryUpdateInput {
  categoryname?: String;
}

export interface OrderUpdateWithoutOrderlineDataInput {
  customer?: String;
  orderdate?: DateTimeInput;
  price_net?: Float;
  tax?: Float;
  price_tot?: Float;
}

export interface CategoryUpdateManyMutationInput {
  categoryname?: String;
}

export interface OrderlinesUpdateInput {
  Products?: ProductsUpdateOneInput;
  order?: OrderUpdateOneWithoutOrderlineInput;
  quantity?: Int;
  orderdate?: DateTimeInput;
}

export interface OrderlinesUpdateWithoutOrderDataInput {
  Products?: ProductsUpdateOneInput;
  quantity?: Int;
  orderdate?: DateTimeInput;
}

export interface OrderlinesWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  Products?: ProductsWhereInput;
  order?: OrderWhereInput;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  orderdate?: DateTimeInput;
  orderdate_not?: DateTimeInput;
  orderdate_in?: DateTimeInput[] | DateTimeInput;
  orderdate_not_in?: DateTimeInput[] | DateTimeInput;
  orderdate_lt?: DateTimeInput;
  orderdate_lte?: DateTimeInput;
  orderdate_gt?: DateTimeInput;
  orderdate_gte?: DateTimeInput;
  AND?: OrderlinesWhereInput[] | OrderlinesWhereInput;
  OR?: OrderlinesWhereInput[] | OrderlinesWhereInput;
  NOT?: OrderlinesWhereInput[] | OrderlinesWhereInput;
}

export interface OrderlinesUpdateOneWithoutOrderInput {
  create?: OrderlinesCreateWithoutOrderInput;
  update?: OrderlinesUpdateWithoutOrderDataInput;
  upsert?: OrderlinesUpsertWithoutOrderInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: OrderlinesWhereUniqueInput;
}

export interface OrderCreateOneWithoutOrderlineInput {
  create?: OrderCreateWithoutOrderlineInput;
  connect?: OrderWhereUniqueInput;
}

export interface InventoryCreateInput {
  prod_id?: ProductsCreateOneWithoutInventoryInput;
  stock_quan: Int;
  sales: Int;
}

export interface OrderUpdateManyMutationInput {
  customer?: String;
  orderdate?: DateTimeInput;
  price_net?: Float;
  tax?: Float;
  price_tot?: Float;
}

export interface ProductsCreateOneWithoutInventoryInput {
  create?: ProductsCreateWithoutInventoryInput;
  connect?: ProductsWhereUniqueInput;
}

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  categoryname?: String;
  categoryname_not?: String;
  categoryname_in?: String[] | String;
  categoryname_not_in?: String[] | String;
  categoryname_lt?: String;
  categoryname_lte?: String;
  categoryname_gt?: String;
  categoryname_gte?: String;
  categoryname_contains?: String;
  categoryname_not_contains?: String;
  categoryname_starts_with?: String;
  categoryname_not_starts_with?: String;
  categoryname_ends_with?: String;
  categoryname_not_ends_with?: String;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface ProductsCreateWithoutInventoryInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
  category?: CategoryCreateOneInput;
}

export interface ProductsUpsertNestedInput {
  update: ProductsUpdateDataInput;
  create: ProductsCreateInput;
}

export interface CategoryCreateOneInput {
  create?: CategoryCreateInput;
  connect?: CategoryWhereUniqueInput;
}

export interface ProductsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductsWhereInput;
  AND?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  OR?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  NOT?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
}

export interface OrderUpdateInput {
  customer?: String;
  orderdate?: DateTimeInput;
  price_net?: Float;
  tax?: Float;
  price_tot?: Float;
  orderline?: OrderlinesUpdateOneWithoutOrderInput;
}

export interface InventorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InventoryWhereInput;
  AND?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
  OR?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
  NOT?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
}

export interface ProductsUpdateOneWithoutInventoryInput {
  create?: ProductsCreateWithoutInventoryInput;
  update?: ProductsUpdateWithoutInventoryDataInput;
  upsert?: ProductsUpsertWithoutInventoryInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductsWhereUniqueInput;
}

export interface ProductsUpdateManyMutationInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
}

export interface ProductsUpdateWithoutInventoryDataInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
  category?: CategoryUpdateOneInput;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CategoryUpdateOneInput {
  create?: CategoryCreateInput;
  update?: CategoryUpdateDataInput;
  upsert?: CategoryUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CategoryWhereUniqueInput;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  customer?: String;
  customer_not?: String;
  customer_in?: String[] | String;
  customer_not_in?: String[] | String;
  customer_lt?: String;
  customer_lte?: String;
  customer_gt?: String;
  customer_gte?: String;
  customer_contains?: String;
  customer_not_contains?: String;
  customer_starts_with?: String;
  customer_not_starts_with?: String;
  customer_ends_with?: String;
  customer_not_ends_with?: String;
  orderdate?: DateTimeInput;
  orderdate_not?: DateTimeInput;
  orderdate_in?: DateTimeInput[] | DateTimeInput;
  orderdate_not_in?: DateTimeInput[] | DateTimeInput;
  orderdate_lt?: DateTimeInput;
  orderdate_lte?: DateTimeInput;
  orderdate_gt?: DateTimeInput;
  orderdate_gte?: DateTimeInput;
  price_net?: Float;
  price_net_not?: Float;
  price_net_in?: Float[] | Float;
  price_net_not_in?: Float[] | Float;
  price_net_lt?: Float;
  price_net_lte?: Float;
  price_net_gt?: Float;
  price_net_gte?: Float;
  tax?: Float;
  tax_not?: Float;
  tax_in?: Float[] | Float;
  tax_not_in?: Float[] | Float;
  tax_lt?: Float;
  tax_lte?: Float;
  tax_gt?: Float;
  tax_gte?: Float;
  price_tot?: Float;
  price_tot_not?: Float;
  price_tot_in?: Float[] | Float;
  price_tot_not_in?: Float[] | Float;
  price_tot_lt?: Float;
  price_tot_lte?: Float;
  price_tot_gt?: Float;
  price_tot_gte?: Float;
  orderline?: OrderlinesWhereInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface InventoryCreateWithoutProd_idInput {
  stock_quan: Int;
  sales: Int;
}

export interface OrderlinesCreateInput {
  Products?: ProductsCreateOneInput;
  order?: OrderCreateOneWithoutOrderlineInput;
  quantity?: Int;
  orderdate: DateTimeInput;
}

export interface CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface OrderlinesUpsertWithoutOrderInput {
  update: OrderlinesUpdateWithoutOrderDataInput;
  create: OrderlinesCreateWithoutOrderInput;
}

export interface ProductsUpsertWithoutInventoryInput {
  update: ProductsUpdateWithoutInventoryDataInput;
  create: ProductsCreateWithoutInventoryInput;
}

export type InventoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface InventoryUpdateManyMutationInput {
  stock_quan?: Int;
  sales?: Int;
}

export interface OrderlinesUpdateManyMutationInput {
  quantity?: Int;
  orderdate?: DateTimeInput;
}

export interface OrderCreateInput {
  customer?: String;
  orderdate?: DateTimeInput;
  price_net: Float;
  tax: Float;
  price_tot: Float;
  orderline?: OrderlinesCreateOneWithoutOrderInput;
}

export interface OrderCreateWithoutOrderlineInput {
  customer?: String;
  orderdate?: DateTimeInput;
  price_net: Float;
  tax: Float;
  price_tot: Float;
}

export interface ProductsCreateInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
  category?: CategoryCreateOneInput;
  inventory?: InventoryCreateOneWithoutProd_idInput;
}

export interface ProductsCreateOneInput {
  create?: ProductsCreateInput;
  connect?: ProductsWhereUniqueInput;
}

export interface OrderlinesCreateWithoutOrderInput {
  Products?: ProductsCreateOneInput;
  quantity?: Int;
  orderdate: DateTimeInput;
}

export interface OrderlinesCreateOneWithoutOrderInput {
  create?: OrderlinesCreateWithoutOrderInput;
  connect?: OrderlinesWhereUniqueInput;
}

export type OrderlinesWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderUpdateOneWithoutOrderlineInput {
  create?: OrderCreateWithoutOrderlineInput;
  update?: OrderUpdateWithoutOrderlineDataInput;
  upsert?: OrderUpsertWithoutOrderlineInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: OrderWhereUniqueInput;
}

export interface InventoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  prod_id?: ProductsWhereInput;
  stock_quan?: Int;
  stock_quan_not?: Int;
  stock_quan_in?: Int[] | Int;
  stock_quan_not_in?: Int[] | Int;
  stock_quan_lt?: Int;
  stock_quan_lte?: Int;
  stock_quan_gt?: Int;
  stock_quan_gte?: Int;
  sales?: Int;
  sales_not?: Int;
  sales_in?: Int[] | Int;
  sales_not_in?: Int[] | Int;
  sales_lt?: Int;
  sales_lte?: Int;
  sales_gt?: Int;
  sales_gte?: Int;
  AND?: InventoryWhereInput[] | InventoryWhereInput;
  OR?: InventoryWhereInput[] | InventoryWhereInput;
  NOT?: InventoryWhereInput[] | InventoryWhereInput;
}

export interface InventoryUpsertWithoutProd_idInput {
  update: InventoryUpdateWithoutProd_idDataInput;
  create: InventoryCreateWithoutProd_idInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ProductsPreviousValues {
  id: ID_Output;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
}

export interface ProductsPreviousValuesPromise
  extends Promise<ProductsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Float>;
  common_prod_id: () => Promise<Int>;
}

export interface ProductsPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Float>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
}

export interface InventoryEdge {
  node: Inventory;
  cursor: String;
}

export interface InventoryEdgePromise
  extends Promise<InventoryEdge>,
    Fragmentable {
  node: <T = InventoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InventoryEdgeSubscription
  extends Promise<AsyncIterator<InventoryEdge>>,
    Fragmentable {
  node: <T = InventorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Order {
  id: ID_Output;
  customer?: String;
  orderdate?: DateTimeOutput;
  price_net: Float;
  tax: Float;
  price_tot: Float;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  customer: () => Promise<String>;
  orderdate: () => Promise<DateTimeOutput>;
  price_net: () => Promise<Float>;
  tax: () => Promise<Float>;
  price_tot: () => Promise<Float>;
  orderline: <T = OrderlinesPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customer: () => Promise<AsyncIterator<String>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  price_net: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  price_tot: () => Promise<AsyncIterator<Float>>;
  orderline: <T = OrderlinesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  customer?: String;
  orderdate?: DateTimeOutput;
  price_net: Float;
  tax: Float;
  price_tot: Float;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customer: () => Promise<String>;
  orderdate: () => Promise<DateTimeOutput>;
  price_net: () => Promise<Float>;
  tax: () => Promise<Float>;
  price_tot: () => Promise<Float>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customer: () => Promise<AsyncIterator<String>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  price_net: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  price_tot: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateInventory {
  count: Int;
}

export interface AggregateInventoryPromise
  extends Promise<AggregateInventory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInventorySubscription
  extends Promise<AsyncIterator<AggregateInventory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InventoryConnection {
  pageInfo: PageInfo;
  edges: InventoryEdge[];
}

export interface InventoryConnectionPromise
  extends Promise<InventoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InventoryEdge>>() => T;
  aggregate: <T = AggregateInventoryPromise>() => T;
}

export interface InventoryConnectionSubscription
  extends Promise<AsyncIterator<InventoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InventoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInventorySubscription>() => T;
}

export interface OrderlinesSubscriptionPayload {
  mutation: MutationType;
  node: Orderlines;
  updatedFields: String[];
  previousValues: OrderlinesPreviousValues;
}

export interface OrderlinesSubscriptionPayloadPromise
  extends Promise<OrderlinesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderlinesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderlinesPreviousValuesPromise>() => T;
}

export interface OrderlinesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderlinesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderlinesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderlinesPreviousValuesSubscription>() => T;
}

export interface ProductsEdge {
  node: Products;
  cursor: String;
}

export interface ProductsEdgePromise
  extends Promise<ProductsEdge>,
    Fragmentable {
  node: <T = ProductsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductsEdgeSubscription
  extends Promise<AsyncIterator<ProductsEdge>>,
    Fragmentable {
  node: <T = ProductsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ProductsSubscriptionPayload {
  mutation: MutationType;
  node: Products;
  updatedFields: String[];
  previousValues: ProductsPreviousValues;
}

export interface ProductsSubscriptionPayloadPromise
  extends Promise<ProductsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductsPreviousValuesPromise>() => T;
}

export interface ProductsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductsPreviousValuesSubscription>() => T;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface OrderlinesEdge {
  node: Orderlines;
  cursor: String;
}

export interface OrderlinesEdgePromise
  extends Promise<OrderlinesEdge>,
    Fragmentable {
  node: <T = OrderlinesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderlinesEdgeSubscription
  extends Promise<AsyncIterator<OrderlinesEdge>>,
    Fragmentable {
  node: <T = OrderlinesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Category {
  id: ID_Output;
  categoryname: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  categoryname: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryname: () => Promise<AsyncIterator<String>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface Orderlines {
  id: ID_Output;
  quantity?: Int;
  orderdate: DateTimeOutput;
}

export interface OrderlinesPromise extends Promise<Orderlines>, Fragmentable {
  id: () => Promise<ID_Output>;
  Products: <T = ProductsPromise>() => T;
  order: <T = OrderPromise>() => T;
  quantity: () => Promise<Int>;
  orderdate: () => Promise<DateTimeOutput>;
}

export interface OrderlinesSubscription
  extends Promise<AsyncIterator<Orderlines>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Products: <T = ProductsSubscription>() => T;
  order: <T = OrderSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  categoryname: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  categoryname: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryname: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProducts {
  count: Int;
}

export interface AggregateProductsPromise
  extends Promise<AggregateProducts>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductsSubscription
  extends Promise<AsyncIterator<AggregateProducts>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Products {
  id: ID_Output;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
}

export interface ProductsPromise extends Promise<Products>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Float>;
  common_prod_id: () => Promise<Int>;
  category: <T = CategoryPromise>() => T;
  inventory: <T = InventoryPromise>() => T;
}

export interface ProductsSubscription
  extends Promise<AsyncIterator<Products>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Float>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
  category: <T = CategorySubscription>() => T;
  inventory: <T = InventorySubscription>() => T;
}

export interface AggregateOrderlines {
  count: Int;
}

export interface AggregateOrderlinesPromise
  extends Promise<AggregateOrderlines>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderlinesSubscription
  extends Promise<AsyncIterator<AggregateOrderlines>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface Inventory {
  id: ID_Output;
  stock_quan: Int;
  sales: Int;
}

export interface InventoryPromise extends Promise<Inventory>, Fragmentable {
  id: () => Promise<ID_Output>;
  prod_id: <T = ProductsPromise>() => T;
  stock_quan: () => Promise<Int>;
  sales: () => Promise<Int>;
}

export interface InventorySubscription
  extends Promise<AsyncIterator<Inventory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  prod_id: <T = ProductsSubscription>() => T;
  stock_quan: () => Promise<AsyncIterator<Int>>;
  sales: () => Promise<AsyncIterator<Int>>;
}

export interface InventoryPreviousValues {
  id: ID_Output;
  stock_quan: Int;
  sales: Int;
}

export interface InventoryPreviousValuesPromise
  extends Promise<InventoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stock_quan: () => Promise<Int>;
  sales: () => Promise<Int>;
}

export interface InventoryPreviousValuesSubscription
  extends Promise<AsyncIterator<InventoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stock_quan: () => Promise<AsyncIterator<Int>>;
  sales: () => Promise<AsyncIterator<Int>>;
}

export interface InventorySubscriptionPayload {
  mutation: MutationType;
  node: Inventory;
  updatedFields: String[];
  previousValues: InventoryPreviousValues;
}

export interface InventorySubscriptionPayloadPromise
  extends Promise<InventorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InventoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InventoryPreviousValuesPromise>() => T;
}

export interface InventorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InventorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InventorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InventoryPreviousValuesSubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderlinesConnection {
  pageInfo: PageInfo;
  edges: OrderlinesEdge[];
}

export interface OrderlinesConnectionPromise
  extends Promise<OrderlinesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderlinesEdge>>() => T;
  aggregate: <T = AggregateOrderlinesPromise>() => T;
}

export interface OrderlinesConnectionSubscription
  extends Promise<AsyncIterator<OrderlinesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderlinesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderlinesSubscription>() => T;
}

export interface ProductsConnection {
  pageInfo: PageInfo;
  edges: ProductsEdge[];
}

export interface ProductsConnectionPromise
  extends Promise<ProductsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductsEdge>>() => T;
  aggregate: <T = AggregateProductsPromise>() => T;
}

export interface ProductsConnectionSubscription
  extends Promise<AsyncIterator<ProductsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductsSubscription>() => T;
}

export interface OrderlinesPreviousValues {
  id: ID_Output;
  quantity?: Int;
  orderdate: DateTimeOutput;
}

export interface OrderlinesPreviousValuesPromise
  extends Promise<OrderlinesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  orderdate: () => Promise<DateTimeOutput>;
}

export interface OrderlinesPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderlinesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Products",
    embedded: false
  },
  {
    name: "Inventory",
    embedded: false
  },
  {
    name: "Orderlines",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
