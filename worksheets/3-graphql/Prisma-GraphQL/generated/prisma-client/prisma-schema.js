module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategories {
  count: Int!
}

type AggregateCust_hist {
  count: Int!
}

type AggregateCustomers {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateOrderlines {
  count: Int!
}

type AggregateOrders {
  count: Int!
}

type AggregateProducts {
  count: Int!
}

type AggregateReorder {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Categories {
  id: ID!
  categoryname: String!
}

type CategoriesConnection {
  pageInfo: PageInfo!
  edges: [CategoriesEdge]!
  aggregate: AggregateCategories!
}

input CategoriesCreateInput {
  categoryname: String!
}

input CategoriesCreateOneInput {
  create: CategoriesCreateInput
  connect: CategoriesWhereUniqueInput
}

type CategoriesEdge {
  node: Categories!
  cursor: String!
}

enum CategoriesOrderByInput {
  id_ASC
  id_DESC
  categoryname_ASC
  categoryname_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoriesPreviousValues {
  id: ID!
  categoryname: String!
}

type CategoriesSubscriptionPayload {
  mutation: MutationType!
  node: Categories
  updatedFields: [String!]
  previousValues: CategoriesPreviousValues
}

input CategoriesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoriesWhereInput
  AND: [CategoriesSubscriptionWhereInput!]
  OR: [CategoriesSubscriptionWhereInput!]
  NOT: [CategoriesSubscriptionWhereInput!]
}

input CategoriesUpdateDataInput {
  categoryname: String
}

input CategoriesUpdateInput {
  categoryname: String
}

input CategoriesUpdateManyMutationInput {
  categoryname: String
}

input CategoriesUpdateOneInput {
  create: CategoriesCreateInput
  update: CategoriesUpdateDataInput
  upsert: CategoriesUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoriesWhereUniqueInput
}

input CategoriesUpsertNestedInput {
  update: CategoriesUpdateDataInput!
  create: CategoriesCreateInput!
}

input CategoriesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  categoryname: String
  categoryname_not: String
  categoryname_in: [String!]
  categoryname_not_in: [String!]
  categoryname_lt: String
  categoryname_lte: String
  categoryname_gt: String
  categoryname_gte: String
  categoryname_contains: String
  categoryname_not_contains: String
  categoryname_starts_with: String
  categoryname_not_starts_with: String
  categoryname_ends_with: String
  categoryname_not_ends_with: String
  AND: [CategoriesWhereInput!]
  OR: [CategoriesWhereInput!]
  NOT: [CategoriesWhereInput!]
}

input CategoriesWhereUniqueInput {
  id: ID
}

type Cust_hist {
  id: ID!
  customers: Customers
  orders: Orders
  products: Products
}

type Cust_histConnection {
  pageInfo: PageInfo!
  edges: [Cust_histEdge]!
  aggregate: AggregateCust_hist!
}

input Cust_histCreateInput {
  customers: CustomersCreateOneInput
  orders: OrdersCreateOneInput
  products: ProductsCreateOneInput
}

type Cust_histEdge {
  node: Cust_hist!
  cursor: String!
}

enum Cust_histOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Cust_histPreviousValues {
  id: ID!
}

type Cust_histSubscriptionPayload {
  mutation: MutationType!
  node: Cust_hist
  updatedFields: [String!]
  previousValues: Cust_histPreviousValues
}

input Cust_histSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Cust_histWhereInput
  AND: [Cust_histSubscriptionWhereInput!]
  OR: [Cust_histSubscriptionWhereInput!]
  NOT: [Cust_histSubscriptionWhereInput!]
}

input Cust_histUpdateInput {
  customers: CustomersUpdateOneInput
  orders: OrdersUpdateOneInput
  products: ProductsUpdateOneInput
}

input Cust_histWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  customers: CustomersWhereInput
  orders: OrdersWhereInput
  products: ProductsWhereInput
  AND: [Cust_histWhereInput!]
  OR: [Cust_histWhereInput!]
  NOT: [Cust_histWhereInput!]
}

input Cust_histWhereUniqueInput {
  id: ID
}

type Customers {
  id: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String
  city: String!
  state: String!
  zip: String
  country: String!
  region: String
  email: String!
  phone: String
  creditcardtype: String
  creditcard: String
  creditcardexpiration: String
  username: String!
  password: String!
  age: Int!
  income: Float
  gender: String!
}

type CustomersConnection {
  pageInfo: PageInfo!
  edges: [CustomersEdge]!
  aggregate: AggregateCustomers!
}

input CustomersCreateInput {
  firstname: String!
  lastname: String!
  address1: String!
  address2: String
  city: String!
  state: String!
  zip: String
  country: String!
  region: String
  email: String!
  phone: String
  creditcardtype: String
  creditcard: String
  creditcardexpiration: String
  username: String!
  password: String!
  age: Int!
  income: Float
  gender: String!
}

input CustomersCreateOneInput {
  create: CustomersCreateInput
  connect: CustomersWhereUniqueInput
}

type CustomersEdge {
  node: Customers!
  cursor: String!
}

enum CustomersOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  country_ASC
  country_DESC
  region_ASC
  region_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  creditcardtype_ASC
  creditcardtype_DESC
  creditcard_ASC
  creditcard_DESC
  creditcardexpiration_ASC
  creditcardexpiration_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  income_ASC
  income_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomersPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String
  city: String!
  state: String!
  zip: String
  country: String!
  region: String
  email: String!
  phone: String
  creditcardtype: String
  creditcard: String
  creditcardexpiration: String
  username: String!
  password: String!
  age: Int!
  income: Float
  gender: String!
}

type CustomersSubscriptionPayload {
  mutation: MutationType!
  node: Customers
  updatedFields: [String!]
  previousValues: CustomersPreviousValues
}

input CustomersSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomersWhereInput
  AND: [CustomersSubscriptionWhereInput!]
  OR: [CustomersSubscriptionWhereInput!]
  NOT: [CustomersSubscriptionWhereInput!]
}

input CustomersUpdateDataInput {
  firstname: String
  lastname: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  region: String
  email: String
  phone: String
  creditcardtype: String
  creditcard: String
  creditcardexpiration: String
  username: String
  password: String
  age: Int
  income: Float
  gender: String
}

input CustomersUpdateInput {
  firstname: String
  lastname: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  region: String
  email: String
  phone: String
  creditcardtype: String
  creditcard: String
  creditcardexpiration: String
  username: String
  password: String
  age: Int
  income: Float
  gender: String
}

input CustomersUpdateManyMutationInput {
  firstname: String
  lastname: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  region: String
  email: String
  phone: String
  creditcardtype: String
  creditcard: String
  creditcardexpiration: String
  username: String
  password: String
  age: Int
  income: Float
  gender: String
}

input CustomersUpdateOneInput {
  create: CustomersCreateInput
  update: CustomersUpdateDataInput
  upsert: CustomersUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomersWhereUniqueInput
}

input CustomersUpsertNestedInput {
  update: CustomersUpdateDataInput!
  create: CustomersCreateInput!
}

input CustomersWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  address1: String
  address1_not: String
  address1_in: [String!]
  address1_not_in: [String!]
  address1_lt: String
  address1_lte: String
  address1_gt: String
  address1_gte: String
  address1_contains: String
  address1_not_contains: String
  address1_starts_with: String
  address1_not_starts_with: String
  address1_ends_with: String
  address1_not_ends_with: String
  address2: String
  address2_not: String
  address2_in: [String!]
  address2_not_in: [String!]
  address2_lt: String
  address2_lte: String
  address2_gt: String
  address2_gte: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  creditcardtype: String
  creditcardtype_not: String
  creditcardtype_in: [String!]
  creditcardtype_not_in: [String!]
  creditcardtype_lt: String
  creditcardtype_lte: String
  creditcardtype_gt: String
  creditcardtype_gte: String
  creditcardtype_contains: String
  creditcardtype_not_contains: String
  creditcardtype_starts_with: String
  creditcardtype_not_starts_with: String
  creditcardtype_ends_with: String
  creditcardtype_not_ends_with: String
  creditcard: String
  creditcard_not: String
  creditcard_in: [String!]
  creditcard_not_in: [String!]
  creditcard_lt: String
  creditcard_lte: String
  creditcard_gt: String
  creditcard_gte: String
  creditcard_contains: String
  creditcard_not_contains: String
  creditcard_starts_with: String
  creditcard_not_starts_with: String
  creditcard_ends_with: String
  creditcard_not_ends_with: String
  creditcardexpiration: String
  creditcardexpiration_not: String
  creditcardexpiration_in: [String!]
  creditcardexpiration_not_in: [String!]
  creditcardexpiration_lt: String
  creditcardexpiration_lte: String
  creditcardexpiration_gt: String
  creditcardexpiration_gte: String
  creditcardexpiration_contains: String
  creditcardexpiration_not_contains: String
  creditcardexpiration_starts_with: String
  creditcardexpiration_not_starts_with: String
  creditcardexpiration_ends_with: String
  creditcardexpiration_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  income: Float
  income_not: Float
  income_in: [Float!]
  income_not_in: [Float!]
  income_lt: Float
  income_lte: Float
  income_gt: Float
  income_gte: Float
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  AND: [CustomersWhereInput!]
  OR: [CustomersWhereInput!]
  NOT: [CustomersWhereInput!]
}

input CustomersWhereUniqueInput {
  id: ID
  email: String
  username: String
}

scalar DateTime

type Inventory {
  id: ID!
  quan_in_stock: Int
  sales: Int
  products: Products
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  quan_in_stock: Int
  sales: Int
  products: ProductsCreateOneWithoutInventoryInput
}

input InventoryCreateOneWithoutProductsInput {
  create: InventoryCreateWithoutProductsInput
  connect: InventoryWhereUniqueInput
}

input InventoryCreateWithoutProductsInput {
  quan_in_stock: Int
  sales: Int
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  id_ASC
  id_DESC
  quan_in_stock_ASC
  quan_in_stock_DESC
  sales_ASC
  sales_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  id: ID!
  quan_in_stock: Int
  sales: Int
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateInput {
  quan_in_stock: Int
  sales: Int
  products: ProductsUpdateOneWithoutInventoryInput
}

input InventoryUpdateManyMutationInput {
  quan_in_stock: Int
  sales: Int
}

input InventoryUpdateOneWithoutProductsInput {
  create: InventoryCreateWithoutProductsInput
  update: InventoryUpdateWithoutProductsDataInput
  upsert: InventoryUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: InventoryWhereUniqueInput
}

input InventoryUpdateWithoutProductsDataInput {
  quan_in_stock: Int
  sales: Int
}

input InventoryUpsertWithoutProductsInput {
  update: InventoryUpdateWithoutProductsDataInput!
  create: InventoryCreateWithoutProductsInput!
}

input InventoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quan_in_stock: Int
  quan_in_stock_not: Int
  quan_in_stock_in: [Int!]
  quan_in_stock_not_in: [Int!]
  quan_in_stock_lt: Int
  quan_in_stock_lte: Int
  quan_in_stock_gt: Int
  quan_in_stock_gte: Int
  sales: Int
  sales_not: Int
  sales_in: [Int!]
  sales_not_in: [Int!]
  sales_lt: Int
  sales_lte: Int
  sales_gt: Int
  sales_gte: Int
  products: ProductsWhereInput
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

input InventoryWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategories(data: CategoriesCreateInput!): Categories!
  updateCategories(data: CategoriesUpdateInput!, where: CategoriesWhereUniqueInput!): Categories
  updateManyCategorieses(data: CategoriesUpdateManyMutationInput!, where: CategoriesWhereInput): BatchPayload!
  upsertCategories(where: CategoriesWhereUniqueInput!, create: CategoriesCreateInput!, update: CategoriesUpdateInput!): Categories!
  deleteCategories(where: CategoriesWhereUniqueInput!): Categories
  deleteManyCategorieses(where: CategoriesWhereInput): BatchPayload!
  createCust_hist(data: Cust_histCreateInput!): Cust_hist!
  updateCust_hist(data: Cust_histUpdateInput!, where: Cust_histWhereUniqueInput!): Cust_hist
  upsertCust_hist(where: Cust_histWhereUniqueInput!, create: Cust_histCreateInput!, update: Cust_histUpdateInput!): Cust_hist!
  deleteCust_hist(where: Cust_histWhereUniqueInput!): Cust_hist
  deleteManyCust_hists(where: Cust_histWhereInput): BatchPayload!
  createCustomers(data: CustomersCreateInput!): Customers!
  updateCustomers(data: CustomersUpdateInput!, where: CustomersWhereUniqueInput!): Customers
  updateManyCustomerses(data: CustomersUpdateManyMutationInput!, where: CustomersWhereInput): BatchPayload!
  upsertCustomers(where: CustomersWhereUniqueInput!, create: CustomersCreateInput!, update: CustomersUpdateInput!): Customers!
  deleteCustomers(where: CustomersWhereUniqueInput!): Customers
  deleteManyCustomerses(where: CustomersWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createOrderlines(data: OrderlinesCreateInput!): Orderlines!
  updateOrderlines(data: OrderlinesUpdateInput!, where: OrderlinesWhereUniqueInput!): Orderlines
  updateManyOrderlineses(data: OrderlinesUpdateManyMutationInput!, where: OrderlinesWhereInput): BatchPayload!
  upsertOrderlines(where: OrderlinesWhereUniqueInput!, create: OrderlinesCreateInput!, update: OrderlinesUpdateInput!): Orderlines!
  deleteOrderlines(where: OrderlinesWhereUniqueInput!): Orderlines
  deleteManyOrderlineses(where: OrderlinesWhereInput): BatchPayload!
  createOrders(data: OrdersCreateInput!): Orders!
  updateOrders(data: OrdersUpdateInput!, where: OrdersWhereUniqueInput!): Orders
  updateManyOrderses(data: OrdersUpdateManyMutationInput!, where: OrdersWhereInput): BatchPayload!
  upsertOrders(where: OrdersWhereUniqueInput!, create: OrdersCreateInput!, update: OrdersUpdateInput!): Orders!
  deleteOrders(where: OrdersWhereUniqueInput!): Orders
  deleteManyOrderses(where: OrdersWhereInput): BatchPayload!
  createProducts(data: ProductsCreateInput!): Products!
  updateProducts(data: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products
  updateManyProductses(data: ProductsUpdateManyMutationInput!, where: ProductsWhereInput): BatchPayload!
  upsertProducts(where: ProductsWhereUniqueInput!, create: ProductsCreateInput!, update: ProductsUpdateInput!): Products!
  deleteProducts(where: ProductsWhereUniqueInput!): Products
  deleteManyProductses(where: ProductsWhereInput): BatchPayload!
  createReorder(data: ReorderCreateInput!): Reorder!
  updateReorder(data: ReorderUpdateInput!, where: ReorderWhereUniqueInput!): Reorder
  updateManyReorders(data: ReorderUpdateManyMutationInput!, where: ReorderWhereInput): BatchPayload!
  upsertReorder(where: ReorderWhereUniqueInput!, create: ReorderCreateInput!, update: ReorderUpdateInput!): Reorder!
  deleteReorder(where: ReorderWhereUniqueInput!): Reorder
  deleteManyReorders(where: ReorderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Orderlines {
  id: ID!
  quantity: Int
  orderdate: DateTime!
  orders: Orders
  products: Products
}

type OrderlinesConnection {
  pageInfo: PageInfo!
  edges: [OrderlinesEdge]!
  aggregate: AggregateOrderlines!
}

input OrderlinesCreateInput {
  quantity: Int
  orderdate: DateTime!
  orders: OrdersCreateOneInput
  products: ProductsCreateOneInput
}

type OrderlinesEdge {
  node: Orderlines!
  cursor: String!
}

enum OrderlinesOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  orderdate_ASC
  orderdate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderlinesPreviousValues {
  id: ID!
  quantity: Int
  orderdate: DateTime!
}

type OrderlinesSubscriptionPayload {
  mutation: MutationType!
  node: Orderlines
  updatedFields: [String!]
  previousValues: OrderlinesPreviousValues
}

input OrderlinesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderlinesWhereInput
  AND: [OrderlinesSubscriptionWhereInput!]
  OR: [OrderlinesSubscriptionWhereInput!]
  NOT: [OrderlinesSubscriptionWhereInput!]
}

input OrderlinesUpdateInput {
  quantity: Int
  orderdate: DateTime
  orders: OrdersUpdateOneInput
  products: ProductsUpdateOneInput
}

input OrderlinesUpdateManyMutationInput {
  quantity: Int
  orderdate: DateTime
}

input OrderlinesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  orderdate: DateTime
  orderdate_not: DateTime
  orderdate_in: [DateTime!]
  orderdate_not_in: [DateTime!]
  orderdate_lt: DateTime
  orderdate_lte: DateTime
  orderdate_gt: DateTime
  orderdate_gte: DateTime
  orders: OrdersWhereInput
  products: ProductsWhereInput
  AND: [OrderlinesWhereInput!]
  OR: [OrderlinesWhereInput!]
  NOT: [OrderlinesWhereInput!]
}

input OrderlinesWhereUniqueInput {
  id: ID
}

type Orders {
  id: ID!
  orderdate: DateTime!
  netamount: Float!
  tax: Float!
  totalamount: Float!
  customers: Customers
}

type OrdersConnection {
  pageInfo: PageInfo!
  edges: [OrdersEdge]!
  aggregate: AggregateOrders!
}

input OrdersCreateInput {
  orderdate: DateTime!
  netamount: Float!
  tax: Float!
  totalamount: Float!
  customers: CustomersCreateOneInput
}

input OrdersCreateOneInput {
  create: OrdersCreateInput
  connect: OrdersWhereUniqueInput
}

type OrdersEdge {
  node: Orders!
  cursor: String!
}

enum OrdersOrderByInput {
  id_ASC
  id_DESC
  orderdate_ASC
  orderdate_DESC
  netamount_ASC
  netamount_DESC
  tax_ASC
  tax_DESC
  totalamount_ASC
  totalamount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrdersPreviousValues {
  id: ID!
  orderdate: DateTime!
  netamount: Float!
  tax: Float!
  totalamount: Float!
}

type OrdersSubscriptionPayload {
  mutation: MutationType!
  node: Orders
  updatedFields: [String!]
  previousValues: OrdersPreviousValues
}

input OrdersSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrdersWhereInput
  AND: [OrdersSubscriptionWhereInput!]
  OR: [OrdersSubscriptionWhereInput!]
  NOT: [OrdersSubscriptionWhereInput!]
}

input OrdersUpdateDataInput {
  orderdate: DateTime
  netamount: Float
  tax: Float
  totalamount: Float
  customers: CustomersUpdateOneInput
}

input OrdersUpdateInput {
  orderdate: DateTime
  netamount: Float
  tax: Float
  totalamount: Float
  customers: CustomersUpdateOneInput
}

input OrdersUpdateManyMutationInput {
  orderdate: DateTime
  netamount: Float
  tax: Float
  totalamount: Float
}

input OrdersUpdateOneInput {
  create: OrdersCreateInput
  update: OrdersUpdateDataInput
  upsert: OrdersUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: OrdersWhereUniqueInput
}

input OrdersUpsertNestedInput {
  update: OrdersUpdateDataInput!
  create: OrdersCreateInput!
}

input OrdersWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  orderdate: DateTime
  orderdate_not: DateTime
  orderdate_in: [DateTime!]
  orderdate_not_in: [DateTime!]
  orderdate_lt: DateTime
  orderdate_lte: DateTime
  orderdate_gt: DateTime
  orderdate_gte: DateTime
  netamount: Float
  netamount_not: Float
  netamount_in: [Float!]
  netamount_not_in: [Float!]
  netamount_lt: Float
  netamount_lte: Float
  netamount_gt: Float
  netamount_gte: Float
  tax: Float
  tax_not: Float
  tax_in: [Float!]
  tax_not_in: [Float!]
  tax_lt: Float
  tax_lte: Float
  tax_gt: Float
  tax_gte: Float
  totalamount: Float
  totalamount_not: Float
  totalamount_in: [Float!]
  totalamount_not_in: [Float!]
  totalamount_lt: Float
  totalamount_lte: Float
  totalamount_gt: Float
  totalamount_gte: Float
  customers: CustomersWhereInput
  AND: [OrdersWhereInput!]
  OR: [OrdersWhereInput!]
  NOT: [OrdersWhereInput!]
}

input OrdersWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Products {
  id: ID!
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
  categories: Categories
  inventory: Inventory
}

type ProductsConnection {
  pageInfo: PageInfo!
  edges: [ProductsEdge]!
  aggregate: AggregateProducts!
}

input ProductsCreateInput {
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
  categories: CategoriesCreateOneInput
  inventory: InventoryCreateOneWithoutProductsInput
}

input ProductsCreateOneInput {
  create: ProductsCreateInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateOneWithoutInventoryInput {
  create: ProductsCreateWithoutInventoryInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateWithoutInventoryInput {
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
  categories: CategoriesCreateOneInput
}

type ProductsEdge {
  node: Products!
  cursor: String!
}

enum ProductsOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  special_ASC
  special_DESC
  common_prod_id_ASC
  common_prod_id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductsPreviousValues {
  id: ID!
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
}

type ProductsSubscriptionPayload {
  mutation: MutationType!
  node: Products
  updatedFields: [String!]
  previousValues: ProductsPreviousValues
}

input ProductsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductsWhereInput
  AND: [ProductsSubscriptionWhereInput!]
  OR: [ProductsSubscriptionWhereInput!]
  NOT: [ProductsSubscriptionWhereInput!]
}

input ProductsUpdateDataInput {
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
  categories: CategoriesUpdateOneInput
  inventory: InventoryUpdateOneWithoutProductsInput
}

input ProductsUpdateInput {
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
  categories: CategoriesUpdateOneInput
  inventory: InventoryUpdateOneWithoutProductsInput
}

input ProductsUpdateManyMutationInput {
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
}

input ProductsUpdateOneInput {
  create: ProductsCreateInput
  update: ProductsUpdateDataInput
  upsert: ProductsUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductsWhereUniqueInput
}

input ProductsUpdateOneWithoutInventoryInput {
  create: ProductsCreateWithoutInventoryInput
  update: ProductsUpdateWithoutInventoryDataInput
  upsert: ProductsUpsertWithoutInventoryInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductsWhereUniqueInput
}

input ProductsUpdateWithoutInventoryDataInput {
  title: String
  actor: String
  price: Float
  special: Boolean
  common_prod_id: Int
  categories: CategoriesUpdateOneInput
}

input ProductsUpsertNestedInput {
  update: ProductsUpdateDataInput!
  create: ProductsCreateInput!
}

input ProductsUpsertWithoutInventoryInput {
  update: ProductsUpdateWithoutInventoryDataInput!
  create: ProductsCreateWithoutInventoryInput!
}

input ProductsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  special: Boolean
  special_not: Boolean
  common_prod_id: Int
  common_prod_id_not: Int
  common_prod_id_in: [Int!]
  common_prod_id_not_in: [Int!]
  common_prod_id_lt: Int
  common_prod_id_lte: Int
  common_prod_id_gt: Int
  common_prod_id_gte: Int
  categories: CategoriesWhereInput
  inventory: InventoryWhereInput
  AND: [ProductsWhereInput!]
  OR: [ProductsWhereInput!]
  NOT: [ProductsWhereInput!]
}

input ProductsWhereUniqueInput {
  id: ID
}

type Query {
  categories(where: CategoriesWhereUniqueInput!): Categories
  categorieses(where: CategoriesWhereInput, orderBy: CategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Categories]!
  categoriesesConnection(where: CategoriesWhereInput, orderBy: CategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoriesConnection!
  cust_hist(where: Cust_histWhereUniqueInput!): Cust_hist
  cust_hists(where: Cust_histWhereInput, orderBy: Cust_histOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cust_hist]!
  cust_histsConnection(where: Cust_histWhereInput, orderBy: Cust_histOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Cust_histConnection!
  customers(where: CustomersWhereUniqueInput!): Customers
  customerses(where: CustomersWhereInput, orderBy: CustomersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customers]!
  customersesConnection(where: CustomersWhereInput, orderBy: CustomersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomersConnection!
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  orderlines(where: OrderlinesWhereUniqueInput!): Orderlines
  orderlineses(where: OrderlinesWhereInput, orderBy: OrderlinesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orderlines]!
  orderlinesesConnection(where: OrderlinesWhereInput, orderBy: OrderlinesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderlinesConnection!
  orders(where: OrdersWhereUniqueInput!): Orders
  orderses(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orders]!
  ordersesConnection(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrdersConnection!
  products(where: ProductsWhereUniqueInput!): Products
  productses(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products]!
  productsesConnection(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductsConnection!
  reorder(where: ReorderWhereUniqueInput!): Reorder
  reorders(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reorder]!
  reordersConnection(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReorderConnection!
  node(id: ID!): Node
}

type Reorder {
  id: ID!
  date_low: DateTime!
  quan_low: Int
  date_reordered: DateTime!
  quan_reordered: Int
  date_expected: String
  products: Products
}

type ReorderConnection {
  pageInfo: PageInfo!
  edges: [ReorderEdge]!
  aggregate: AggregateReorder!
}

input ReorderCreateInput {
  date_low: DateTime!
  quan_low: Int
  date_reordered: DateTime!
  quan_reordered: Int
  date_expected: String
  products: ProductsCreateOneInput
}

type ReorderEdge {
  node: Reorder!
  cursor: String!
}

enum ReorderOrderByInput {
  id_ASC
  id_DESC
  date_low_ASC
  date_low_DESC
  quan_low_ASC
  quan_low_DESC
  date_reordered_ASC
  date_reordered_DESC
  quan_reordered_ASC
  quan_reordered_DESC
  date_expected_ASC
  date_expected_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReorderPreviousValues {
  id: ID!
  date_low: DateTime!
  quan_low: Int
  date_reordered: DateTime!
  quan_reordered: Int
  date_expected: String
}

type ReorderSubscriptionPayload {
  mutation: MutationType!
  node: Reorder
  updatedFields: [String!]
  previousValues: ReorderPreviousValues
}

input ReorderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReorderWhereInput
  AND: [ReorderSubscriptionWhereInput!]
  OR: [ReorderSubscriptionWhereInput!]
  NOT: [ReorderSubscriptionWhereInput!]
}

input ReorderUpdateInput {
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: Int
  date_expected: String
  products: ProductsUpdateOneInput
}

input ReorderUpdateManyMutationInput {
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: Int
  date_expected: String
}

input ReorderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date_low: DateTime
  date_low_not: DateTime
  date_low_in: [DateTime!]
  date_low_not_in: [DateTime!]
  date_low_lt: DateTime
  date_low_lte: DateTime
  date_low_gt: DateTime
  date_low_gte: DateTime
  quan_low: Int
  quan_low_not: Int
  quan_low_in: [Int!]
  quan_low_not_in: [Int!]
  quan_low_lt: Int
  quan_low_lte: Int
  quan_low_gt: Int
  quan_low_gte: Int
  date_reordered: DateTime
  date_reordered_not: DateTime
  date_reordered_in: [DateTime!]
  date_reordered_not_in: [DateTime!]
  date_reordered_lt: DateTime
  date_reordered_lte: DateTime
  date_reordered_gt: DateTime
  date_reordered_gte: DateTime
  quan_reordered: Int
  quan_reordered_not: Int
  quan_reordered_in: [Int!]
  quan_reordered_not_in: [Int!]
  quan_reordered_lt: Int
  quan_reordered_lte: Int
  quan_reordered_gt: Int
  quan_reordered_gte: Int
  date_expected: String
  date_expected_not: String
  date_expected_in: [String!]
  date_expected_not_in: [String!]
  date_expected_lt: String
  date_expected_lte: String
  date_expected_gt: String
  date_expected_gte: String
  date_expected_contains: String
  date_expected_not_contains: String
  date_expected_starts_with: String
  date_expected_not_starts_with: String
  date_expected_ends_with: String
  date_expected_not_ends_with: String
  products: ProductsWhereInput
  AND: [ReorderWhereInput!]
  OR: [ReorderWhereInput!]
  NOT: [ReorderWhereInput!]
}

input ReorderWhereUniqueInput {
  id: ID
}

type Subscription {
  categories(where: CategoriesSubscriptionWhereInput): CategoriesSubscriptionPayload
  cust_hist(where: Cust_histSubscriptionWhereInput): Cust_histSubscriptionPayload
  customers(where: CustomersSubscriptionWhereInput): CustomersSubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  orderlines(where: OrderlinesSubscriptionWhereInput): OrderlinesSubscriptionPayload
  orders(where: OrdersSubscriptionWhereInput): OrdersSubscriptionPayload
  products(where: ProductsSubscriptionWhereInput): ProductsSubscriptionPayload
  reorder(where: ReorderSubscriptionWhereInput): ReorderSubscriptionPayload
}
`
      }
    