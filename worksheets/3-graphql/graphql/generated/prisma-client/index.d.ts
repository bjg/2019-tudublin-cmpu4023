// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  categories: (where?: CategoriesWhereInput) => Promise<boolean>;
  inventory: (where?: InventoryWhereInput) => Promise<boolean>;
  products: (where?: ProductsWhereInput) => Promise<boolean>;
  reorder: (where?: ReorderWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  categories: (where: CategoriesWhereUniqueInput) => CategoriesPromise;
  categorieses: (
    args?: {
      where?: CategoriesWhereInput;
      orderBy?: CategoriesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Categories>;
  categoriesesConnection: (
    args?: {
      where?: CategoriesWhereInput;
      orderBy?: CategoriesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoriesConnectionPromise;
  inventory: (where: InventoryWhereUniqueInput) => InventoryPromise;
  inventories: (
    args?: {
      where?: InventoryWhereInput;
      orderBy?: InventoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Inventory>;
  inventoriesConnection: (
    args?: {
      where?: InventoryWhereInput;
      orderBy?: InventoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InventoryConnectionPromise;
  products: (where: ProductsWhereUniqueInput) => ProductsPromise;
  productses: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Products>;
  productsesConnection: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductsConnectionPromise;
  reorder: (where: ReorderWhereUniqueInput) => ReorderPromise;
  reorders: (
    args?: {
      where?: ReorderWhereInput;
      orderBy?: ReorderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Reorder>;
  reordersConnection: (
    args?: {
      where?: ReorderWhereInput;
      orderBy?: ReorderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReorderConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategories: (data: CategoriesCreateInput) => CategoriesPromise;
  updateCategories: (
    args: { data: CategoriesUpdateInput; where: CategoriesWhereUniqueInput }
  ) => CategoriesPromise;
  updateManyCategorieses: (
    args: {
      data: CategoriesUpdateManyMutationInput;
      where?: CategoriesWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCategories: (
    args: {
      where: CategoriesWhereUniqueInput;
      create: CategoriesCreateInput;
      update: CategoriesUpdateInput;
    }
  ) => CategoriesPromise;
  deleteCategories: (where: CategoriesWhereUniqueInput) => CategoriesPromise;
  deleteManyCategorieses: (where?: CategoriesWhereInput) => BatchPayloadPromise;
  createInventory: (data: InventoryCreateInput) => InventoryPromise;
  updateInventory: (
    args: { data: InventoryUpdateInput; where: InventoryWhereUniqueInput }
  ) => InventoryPromise;
  updateManyInventories: (
    args: {
      data: InventoryUpdateManyMutationInput;
      where?: InventoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInventory: (
    args: {
      where: InventoryWhereUniqueInput;
      create: InventoryCreateInput;
      update: InventoryUpdateInput;
    }
  ) => InventoryPromise;
  deleteInventory: (where: InventoryWhereUniqueInput) => InventoryPromise;
  deleteManyInventories: (where?: InventoryWhereInput) => BatchPayloadPromise;
  createProducts: (data: ProductsCreateInput) => ProductsPromise;
  updateProducts: (
    args: { data: ProductsUpdateInput; where: ProductsWhereUniqueInput }
  ) => ProductsPromise;
  updateManyProductses: (
    args: { data: ProductsUpdateManyMutationInput; where?: ProductsWhereInput }
  ) => BatchPayloadPromise;
  upsertProducts: (
    args: {
      where: ProductsWhereUniqueInput;
      create: ProductsCreateInput;
      update: ProductsUpdateInput;
    }
  ) => ProductsPromise;
  deleteProducts: (where: ProductsWhereUniqueInput) => ProductsPromise;
  deleteManyProductses: (where?: ProductsWhereInput) => BatchPayloadPromise;
  createReorder: (data: ReorderCreateInput) => ReorderPromise;
  updateReorder: (
    args: { data: ReorderUpdateInput; where: ReorderWhereUniqueInput }
  ) => ReorderPromise;
  updateManyReorders: (
    args: { data: ReorderUpdateManyMutationInput; where?: ReorderWhereInput }
  ) => BatchPayloadPromise;
  upsertReorder: (
    args: {
      where: ReorderWhereUniqueInput;
      create: ReorderCreateInput;
      update: ReorderUpdateInput;
    }
  ) => ReorderPromise;
  deleteReorder: (where: ReorderWhereUniqueInput) => ReorderPromise;
  deleteManyReorders: (where?: ReorderWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  categories: (
    where?: CategoriesSubscriptionWhereInput
  ) => CategoriesSubscriptionPayloadSubscription;
  inventory: (
    where?: InventorySubscriptionWhereInput
  ) => InventorySubscriptionPayloadSubscription;
  products: (
    where?: ProductsSubscriptionWhereInput
  ) => ProductsSubscriptionPayloadSubscription;
  reorder: (
    where?: ReorderSubscriptionWhereInput
  ) => ReorderSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CategoriesOrderByInput =
  | "category_ASC"
  | "category_DESC"
  | "categoryname_ASC"
  | "categoryname_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InventoryOrderByInput =
  | "prod_id_ASC"
  | "prod_id_DESC"
  | "quan_in_stock_ASC"
  | "quan_in_stock_DESC"
  | "sales_ASC"
  | "sales_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductsOrderByInput =
  | "prod_id_ASC"
  | "prod_id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "title_ASC"
  | "title_DESC"
  | "actor_ASC"
  | "actor_DESC"
  | "price_ASC"
  | "price_DESC"
  | "special_ASC"
  | "special_DESC"
  | "common_prod_id_ASC"
  | "common_prod_id_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReorderOrderByInput =
  | "prod_id_ASC"
  | "prod_id_DESC"
  | "date_low_ASC"
  | "date_low_DESC"
  | "quan_low_ASC"
  | "quan_low_DESC"
  | "date_reordered_ASC"
  | "date_reordered_DESC"
  | "quan_reordered_ASC"
  | "quan_reordered_DESC"
  | "date_expected_ASC"
  | "date_expected_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ReorderUpdateOneWithoutProductsInput {
  create?: ReorderCreateWithoutProductsInput;
  update?: ReorderUpdateWithoutProductsDataInput;
  upsert?: ReorderUpsertWithoutProductsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ReorderWhereUniqueInput;
}

export type CategoriesWhereUniqueInput = AtLeastOne<{
  category: Int;
}>;

export interface CategoriesUpdateWithoutProductsDataInput {
  category?: Int;
  categoryname?: String;
}

export interface CategoriesCreateWithoutProductsInput {
  category?: Int;
  categoryname: String;
}

export interface InventoryUpdateWithoutProductsDataInput {
  prod_id?: Int;
  quan_in_stock?: Int;
  sales?: Int;
}

export interface ProductsWhereInput {
  prod_id?: Int;
  prod_id_not?: Int;
  prod_id_in?: Int[] | Int;
  prod_id_not_in?: Int[] | Int;
  prod_id_lt?: Int;
  prod_id_lte?: Int;
  prod_id_gt?: Int;
  prod_id_gte?: Int;
  category?: Int;
  category_not?: Int;
  category_in?: Int[] | Int;
  category_not_in?: Int[] | Int;
  category_lt?: Int;
  category_lte?: Int;
  category_gt?: Int;
  category_gte?: Int;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  actor?: String;
  actor_not?: String;
  actor_in?: String[] | String;
  actor_not_in?: String[] | String;
  actor_lt?: String;
  actor_lte?: String;
  actor_gt?: String;
  actor_gte?: String;
  actor_contains?: String;
  actor_not_contains?: String;
  actor_starts_with?: String;
  actor_not_starts_with?: String;
  actor_ends_with?: String;
  actor_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  special?: Int;
  special_not?: Int;
  special_in?: Int[] | Int;
  special_not_in?: Int[] | Int;
  special_lt?: Int;
  special_lte?: Int;
  special_gt?: Int;
  special_gte?: Int;
  common_prod_id?: Int;
  common_prod_id_not?: Int;
  common_prod_id_in?: Int[] | Int;
  common_prod_id_not_in?: Int[] | Int;
  common_prod_id_lt?: Int;
  common_prod_id_lte?: Int;
  common_prod_id_gt?: Int;
  common_prod_id_gte?: Int;
  reorder?: ReorderWhereInput;
  inventory?: InventoryWhereInput;
  categories?: CategoriesWhereInput;
  AND?: ProductsWhereInput[] | ProductsWhereInput;
  OR?: ProductsWhereInput[] | ProductsWhereInput;
  NOT?: ProductsWhereInput[] | ProductsWhereInput;
}

export interface CategoriesCreateInput {
  category?: Int;
  categoryname: String;
  products?: ProductsCreateOneWithoutCategoriesInput;
}

export interface InventoryWhereInput {
  prod_id?: Int;
  prod_id_not?: Int;
  prod_id_in?: Int[] | Int;
  prod_id_not_in?: Int[] | Int;
  prod_id_lt?: Int;
  prod_id_lte?: Int;
  prod_id_gt?: Int;
  prod_id_gte?: Int;
  quan_in_stock?: Int;
  quan_in_stock_not?: Int;
  quan_in_stock_in?: Int[] | Int;
  quan_in_stock_not_in?: Int[] | Int;
  quan_in_stock_lt?: Int;
  quan_in_stock_lte?: Int;
  quan_in_stock_gt?: Int;
  quan_in_stock_gte?: Int;
  sales?: Int;
  sales_not?: Int;
  sales_in?: Int[] | Int;
  sales_not_in?: Int[] | Int;
  sales_lt?: Int;
  sales_lte?: Int;
  sales_gt?: Int;
  sales_gte?: Int;
  products?: ProductsWhereInput;
  AND?: InventoryWhereInput[] | InventoryWhereInput;
  OR?: InventoryWhereInput[] | InventoryWhereInput;
  NOT?: InventoryWhereInput[] | InventoryWhereInput;
}

export interface ProductsCreateOneWithoutCategoriesInput {
  create?: ProductsCreateWithoutCategoriesInput;
  connect?: ProductsWhereUniqueInput;
}

export interface ProductsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductsWhereInput;
  AND?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  OR?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  NOT?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
}

export interface ProductsCreateWithoutCategoriesInput {
  prod_id: Int;
  category: Int;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
  reorder?: ReorderCreateOneWithoutProductsInput;
  inventory?: InventoryCreateOneWithoutProductsInput;
}

export interface CategoriesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoriesWhereInput;
  AND?: CategoriesSubscriptionWhereInput[] | CategoriesSubscriptionWhereInput;
  OR?: CategoriesSubscriptionWhereInput[] | CategoriesSubscriptionWhereInput;
  NOT?: CategoriesSubscriptionWhereInput[] | CategoriesSubscriptionWhereInput;
}

export interface ReorderCreateOneWithoutProductsInput {
  create?: ReorderCreateWithoutProductsInput;
  connect?: ReorderWhereUniqueInput;
}

export interface ProductsUpsertWithoutReorderInput {
  update: ProductsUpdateWithoutReorderDataInput;
  create: ProductsCreateWithoutReorderInput;
}

export interface ReorderCreateWithoutProductsInput {
  prod_id: Int;
  date_low: DateTimeInput;
  quan_low: Int;
  date_reordered: DateTimeInput;
  quan_reordered: Int;
  date_expected: DateTimeInput;
}

export interface ProductsUpdateWithoutReorderDataInput {
  prod_id?: Int;
  category?: Int;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
  inventory?: InventoryUpdateOneWithoutProductsInput;
  categories?: CategoriesUpdateOneWithoutProductsInput;
}

export interface InventoryCreateOneWithoutProductsInput {
  create?: InventoryCreateWithoutProductsInput;
  connect?: InventoryWhereUniqueInput;
}

export interface ReorderUpdateInput {
  prod_id?: Int;
  date_low?: DateTimeInput;
  quan_low?: Int;
  date_reordered?: DateTimeInput;
  quan_reordered?: Int;
  date_expected?: DateTimeInput;
  products?: ProductsUpdateOneWithoutReorderInput;
}

export interface InventoryCreateWithoutProductsInput {
  prod_id: Int;
  quan_in_stock: Int;
  sales: Int;
}

export type ProductsWhereUniqueInput = AtLeastOne<{
  prod_id: Int;
  category?: Int;
}>;

export interface CategoriesUpdateInput {
  category?: Int;
  categoryname?: String;
  products?: ProductsUpdateOneWithoutCategoriesInput;
}

export interface ReorderCreateInput {
  prod_id: Int;
  date_low: DateTimeInput;
  quan_low: Int;
  date_reordered: DateTimeInput;
  quan_reordered: Int;
  date_expected: DateTimeInput;
  products?: ProductsCreateOneWithoutReorderInput;
}

export interface ProductsUpdateOneWithoutCategoriesInput {
  create?: ProductsCreateWithoutCategoriesInput;
  update?: ProductsUpdateWithoutCategoriesDataInput;
  upsert?: ProductsUpsertWithoutCategoriesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductsWhereUniqueInput;
}

export interface ProductsUpdateInput {
  prod_id?: Int;
  category?: Int;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
  reorder?: ReorderUpdateOneWithoutProductsInput;
  inventory?: InventoryUpdateOneWithoutProductsInput;
  categories?: CategoriesUpdateOneWithoutProductsInput;
}

export interface ProductsUpdateWithoutCategoriesDataInput {
  prod_id?: Int;
  category?: Int;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
  reorder?: ReorderUpdateOneWithoutProductsInput;
  inventory?: InventoryUpdateOneWithoutProductsInput;
}

export interface ProductsCreateInput {
  prod_id: Int;
  category: Int;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
  reorder?: ReorderCreateOneWithoutProductsInput;
  inventory?: InventoryCreateOneWithoutProductsInput;
  categories?: CategoriesCreateOneWithoutProductsInput;
}

export interface CategoriesUpdateOneWithoutProductsInput {
  create?: CategoriesCreateWithoutProductsInput;
  update?: CategoriesUpdateWithoutProductsDataInput;
  upsert?: CategoriesUpsertWithoutProductsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CategoriesWhereUniqueInput;
}

export interface ProductsUpsertWithoutInventoryInput {
  update: ProductsUpdateWithoutInventoryDataInput;
  create: ProductsCreateWithoutInventoryInput;
}

export interface ReorderUpdateWithoutProductsDataInput {
  prod_id?: Int;
  date_low?: DateTimeInput;
  quan_low?: Int;
  date_reordered?: DateTimeInput;
  quan_reordered?: Int;
  date_expected?: DateTimeInput;
}

export interface CategoriesWhereInput {
  category?: Int;
  category_not?: Int;
  category_in?: Int[] | Int;
  category_not_in?: Int[] | Int;
  category_lt?: Int;
  category_lte?: Int;
  category_gt?: Int;
  category_gte?: Int;
  categoryname?: String;
  categoryname_not?: String;
  categoryname_in?: String[] | String;
  categoryname_not_in?: String[] | String;
  categoryname_lt?: String;
  categoryname_lte?: String;
  categoryname_gt?: String;
  categoryname_gte?: String;
  categoryname_contains?: String;
  categoryname_not_contains?: String;
  categoryname_starts_with?: String;
  categoryname_not_starts_with?: String;
  categoryname_ends_with?: String;
  categoryname_not_ends_with?: String;
  products?: ProductsWhereInput;
  AND?: CategoriesWhereInput[] | CategoriesWhereInput;
  OR?: CategoriesWhereInput[] | CategoriesWhereInput;
  NOT?: CategoriesWhereInput[] | CategoriesWhereInput;
}

export interface ReorderUpsertWithoutProductsInput {
  update: ReorderUpdateWithoutProductsDataInput;
  create: ReorderCreateWithoutProductsInput;
}

export interface ReorderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReorderWhereInput;
  AND?: ReorderSubscriptionWhereInput[] | ReorderSubscriptionWhereInput;
  OR?: ReorderSubscriptionWhereInput[] | ReorderSubscriptionWhereInput;
  NOT?: ReorderSubscriptionWhereInput[] | ReorderSubscriptionWhereInput;
}

export interface InventoryUpdateOneWithoutProductsInput {
  create?: InventoryCreateWithoutProductsInput;
  update?: InventoryUpdateWithoutProductsDataInput;
  upsert?: InventoryUpsertWithoutProductsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: InventoryWhereUniqueInput;
}

export interface ReorderUpdateManyMutationInput {
  prod_id?: Int;
  date_low?: DateTimeInput;
  quan_low?: Int;
  date_reordered?: DateTimeInput;
  quan_reordered?: Int;
  date_expected?: DateTimeInput;
}

export interface ProductsUpdateWithoutInventoryDataInput {
  prod_id?: Int;
  category?: Int;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
  reorder?: ReorderUpdateOneWithoutProductsInput;
  categories?: CategoriesUpdateOneWithoutProductsInput;
}

export interface ProductsUpdateOneWithoutReorderInput {
  create?: ProductsCreateWithoutReorderInput;
  update?: ProductsUpdateWithoutReorderDataInput;
  upsert?: ProductsUpsertWithoutReorderInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductsWhereUniqueInput;
}

export interface InventoryUpsertWithoutProductsInput {
  update: InventoryUpdateWithoutProductsDataInput;
  create: InventoryCreateWithoutProductsInput;
}

export interface ProductsCreateOneWithoutReorderInput {
  create?: ProductsCreateWithoutReorderInput;
  connect?: ProductsWhereUniqueInput;
}

export interface ProductsUpsertWithoutCategoriesInput {
  update: ProductsUpdateWithoutCategoriesDataInput;
  create: ProductsCreateWithoutCategoriesInput;
}

export type ReorderWhereUniqueInput = AtLeastOne<{
  prod_id: Int;
}>;

export interface CategoriesUpdateManyMutationInput {
  category?: Int;
  categoryname?: String;
}

export interface CategoriesUpsertWithoutProductsInput {
  update: CategoriesUpdateWithoutProductsDataInput;
  create: CategoriesCreateWithoutProductsInput;
}

export interface ProductsUpdateOneWithoutInventoryInput {
  create?: ProductsCreateWithoutInventoryInput;
  update?: ProductsUpdateWithoutInventoryDataInput;
  upsert?: ProductsUpsertWithoutInventoryInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductsWhereUniqueInput;
}

export interface InventorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InventoryWhereInput;
  AND?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
  OR?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
  NOT?: InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput;
}

export interface InventoryUpdateInput {
  prod_id?: Int;
  quan_in_stock?: Int;
  sales?: Int;
  products?: ProductsUpdateOneWithoutInventoryInput;
}

export interface ProductsCreateWithoutReorderInput {
  prod_id: Int;
  category: Int;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
  inventory?: InventoryCreateOneWithoutProductsInput;
  categories?: CategoriesCreateOneWithoutProductsInput;
}

export interface CategoriesCreateOneWithoutProductsInput {
  create?: CategoriesCreateWithoutProductsInput;
  connect?: CategoriesWhereUniqueInput;
}

export interface ProductsCreateWithoutInventoryInput {
  prod_id: Int;
  category: Int;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
  reorder?: ReorderCreateOneWithoutProductsInput;
  categories?: CategoriesCreateOneWithoutProductsInput;
}

export interface ProductsCreateOneWithoutInventoryInput {
  create?: ProductsCreateWithoutInventoryInput;
  connect?: ProductsWhereUniqueInput;
}

export interface InventoryCreateInput {
  prod_id: Int;
  quan_in_stock: Int;
  sales: Int;
  products?: ProductsCreateOneWithoutInventoryInput;
}

export interface ProductsUpdateManyMutationInput {
  prod_id?: Int;
  category?: Int;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Int;
  common_prod_id?: Int;
}

export type InventoryWhereUniqueInput = AtLeastOne<{
  prod_id: Int;
}>;

export interface ReorderWhereInput {
  prod_id?: Int;
  prod_id_not?: Int;
  prod_id_in?: Int[] | Int;
  prod_id_not_in?: Int[] | Int;
  prod_id_lt?: Int;
  prod_id_lte?: Int;
  prod_id_gt?: Int;
  prod_id_gte?: Int;
  date_low?: DateTimeInput;
  date_low_not?: DateTimeInput;
  date_low_in?: DateTimeInput[] | DateTimeInput;
  date_low_not_in?: DateTimeInput[] | DateTimeInput;
  date_low_lt?: DateTimeInput;
  date_low_lte?: DateTimeInput;
  date_low_gt?: DateTimeInput;
  date_low_gte?: DateTimeInput;
  quan_low?: Int;
  quan_low_not?: Int;
  quan_low_in?: Int[] | Int;
  quan_low_not_in?: Int[] | Int;
  quan_low_lt?: Int;
  quan_low_lte?: Int;
  quan_low_gt?: Int;
  quan_low_gte?: Int;
  date_reordered?: DateTimeInput;
  date_reordered_not?: DateTimeInput;
  date_reordered_in?: DateTimeInput[] | DateTimeInput;
  date_reordered_not_in?: DateTimeInput[] | DateTimeInput;
  date_reordered_lt?: DateTimeInput;
  date_reordered_lte?: DateTimeInput;
  date_reordered_gt?: DateTimeInput;
  date_reordered_gte?: DateTimeInput;
  quan_reordered?: Int;
  quan_reordered_not?: Int;
  quan_reordered_in?: Int[] | Int;
  quan_reordered_not_in?: Int[] | Int;
  quan_reordered_lt?: Int;
  quan_reordered_lte?: Int;
  quan_reordered_gt?: Int;
  quan_reordered_gte?: Int;
  date_expected?: DateTimeInput;
  date_expected_not?: DateTimeInput;
  date_expected_in?: DateTimeInput[] | DateTimeInput;
  date_expected_not_in?: DateTimeInput[] | DateTimeInput;
  date_expected_lt?: DateTimeInput;
  date_expected_lte?: DateTimeInput;
  date_expected_gt?: DateTimeInput;
  date_expected_gte?: DateTimeInput;
  products?: ProductsWhereInput;
  AND?: ReorderWhereInput[] | ReorderWhereInput;
  OR?: ReorderWhereInput[] | ReorderWhereInput;
  NOT?: ReorderWhereInput[] | ReorderWhereInput;
}

export interface InventoryUpdateManyMutationInput {
  prod_id?: Int;
  quan_in_stock?: Int;
  sales?: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ReorderPreviousValues {
  prod_id: Int;
  date_low: DateTimeOutput;
  quan_low: Int;
  date_reordered: DateTimeOutput;
  quan_reordered: Int;
  date_expected: DateTimeOutput;
}

export interface ReorderPreviousValuesPromise
  extends Promise<ReorderPreviousValues>,
    Fragmentable {
  prod_id: () => Promise<Int>;
  date_low: () => Promise<DateTimeOutput>;
  quan_low: () => Promise<Int>;
  date_reordered: () => Promise<DateTimeOutput>;
  quan_reordered: () => Promise<Int>;
  date_expected: () => Promise<DateTimeOutput>;
}

export interface ReorderPreviousValuesSubscription
  extends Promise<AsyncIterator<ReorderPreviousValues>>,
    Fragmentable {
  prod_id: () => Promise<AsyncIterator<Int>>;
  date_low: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_low: () => Promise<AsyncIterator<Int>>;
  date_reordered: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_reordered: () => Promise<AsyncIterator<Int>>;
  date_expected: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InventoryEdge {
  node: Inventory;
  cursor: String;
}

export interface InventoryEdgePromise
  extends Promise<InventoryEdge>,
    Fragmentable {
  node: <T = InventoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InventoryEdgeSubscription
  extends Promise<AsyncIterator<InventoryEdge>>,
    Fragmentable {
  node: <T = InventorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoriesConnection {
  pageInfo: PageInfo;
  edges: CategoriesEdge[];
}

export interface CategoriesConnectionPromise
  extends Promise<CategoriesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoriesEdge>>() => T;
  aggregate: <T = AggregateCategoriesPromise>() => T;
}

export interface CategoriesConnectionSubscription
  extends Promise<AsyncIterator<CategoriesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoriesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategoriesSubscription>() => T;
}

export interface InventoryConnection {
  pageInfo: PageInfo;
  edges: InventoryEdge[];
}

export interface InventoryConnectionPromise
  extends Promise<InventoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InventoryEdge>>() => T;
  aggregate: <T = AggregateInventoryPromise>() => T;
}

export interface InventoryConnectionSubscription
  extends Promise<AsyncIterator<InventoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InventoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInventorySubscription>() => T;
}

export interface ReorderSubscriptionPayload {
  mutation: MutationType;
  node: Reorder;
  updatedFields: String[];
  previousValues: ReorderPreviousValues;
}

export interface ReorderSubscriptionPayloadPromise
  extends Promise<ReorderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReorderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReorderPreviousValuesPromise>() => T;
}

export interface ReorderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReorderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReorderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReorderPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateReorder {
  count: Int;
}

export interface AggregateReorderPromise
  extends Promise<AggregateReorder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReorderSubscription
  extends Promise<AsyncIterator<AggregateReorder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCategories {
  count: Int;
}

export interface AggregateCategoriesPromise
  extends Promise<AggregateCategories>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategoriesSubscription
  extends Promise<AsyncIterator<AggregateCategories>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReorderConnection {
  pageInfo: PageInfo;
  edges: ReorderEdge[];
}

export interface ReorderConnectionPromise
  extends Promise<ReorderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReorderEdge>>() => T;
  aggregate: <T = AggregateReorderPromise>() => T;
}

export interface ReorderConnectionSubscription
  extends Promise<AsyncIterator<ReorderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReorderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReorderSubscription>() => T;
}

export interface CategoriesEdge {
  node: Categories;
  cursor: String;
}

export interface CategoriesEdgePromise
  extends Promise<CategoriesEdge>,
    Fragmentable {
  node: <T = CategoriesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoriesEdgeSubscription
  extends Promise<AsyncIterator<CategoriesEdge>>,
    Fragmentable {
  node: <T = CategoriesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProducts {
  count: Int;
}

export interface AggregateProductsPromise
  extends Promise<AggregateProducts>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductsSubscription
  extends Promise<AsyncIterator<AggregateProducts>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductsSubscriptionPayload {
  mutation: MutationType;
  node: Products;
  updatedFields: String[];
  previousValues: ProductsPreviousValues;
}

export interface ProductsSubscriptionPayloadPromise
  extends Promise<ProductsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductsPreviousValuesPromise>() => T;
}

export interface ProductsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductsPreviousValuesSubscription>() => T;
}

export interface ProductsConnection {
  pageInfo: PageInfo;
  edges: ProductsEdge[];
}

export interface ProductsConnectionPromise
  extends Promise<ProductsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductsEdge>>() => T;
  aggregate: <T = AggregateProductsPromise>() => T;
}

export interface ProductsConnectionSubscription
  extends Promise<AsyncIterator<ProductsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductsSubscription>() => T;
}

export interface Categories {
  category?: Int;
  categoryname: String;
}

export interface CategoriesPromise extends Promise<Categories>, Fragmentable {
  category: () => Promise<Int>;
  categoryname: () => Promise<String>;
  products: <T = ProductsPromise>() => T;
}

export interface CategoriesSubscription
  extends Promise<AsyncIterator<Categories>>,
    Fragmentable {
  category: () => Promise<AsyncIterator<Int>>;
  categoryname: () => Promise<AsyncIterator<String>>;
  products: <T = ProductsSubscription>() => T;
}

export interface AggregateInventory {
  count: Int;
}

export interface AggregateInventoryPromise
  extends Promise<AggregateInventory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInventorySubscription
  extends Promise<AsyncIterator<AggregateInventory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoriesSubscriptionPayload {
  mutation: MutationType;
  node: Categories;
  updatedFields: String[];
  previousValues: CategoriesPreviousValues;
}

export interface CategoriesSubscriptionPayloadPromise
  extends Promise<CategoriesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoriesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoriesPreviousValuesPromise>() => T;
}

export interface CategoriesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategoriesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategoriesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoriesPreviousValuesSubscription>() => T;
}

export interface Reorder {
  prod_id: Int;
  date_low: DateTimeOutput;
  quan_low: Int;
  date_reordered: DateTimeOutput;
  quan_reordered: Int;
  date_expected: DateTimeOutput;
}

export interface ReorderPromise extends Promise<Reorder>, Fragmentable {
  prod_id: () => Promise<Int>;
  date_low: () => Promise<DateTimeOutput>;
  quan_low: () => Promise<Int>;
  date_reordered: () => Promise<DateTimeOutput>;
  quan_reordered: () => Promise<Int>;
  date_expected: () => Promise<DateTimeOutput>;
  products: <T = ProductsPromise>() => T;
}

export interface ReorderSubscription
  extends Promise<AsyncIterator<Reorder>>,
    Fragmentable {
  prod_id: () => Promise<AsyncIterator<Int>>;
  date_low: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_low: () => Promise<AsyncIterator<Int>>;
  date_reordered: () => Promise<AsyncIterator<DateTimeOutput>>;
  quan_reordered: () => Promise<AsyncIterator<Int>>;
  date_expected: () => Promise<AsyncIterator<DateTimeOutput>>;
  products: <T = ProductsSubscription>() => T;
}

export interface InventoryPreviousValues {
  prod_id: Int;
  quan_in_stock: Int;
  sales: Int;
}

export interface InventoryPreviousValuesPromise
  extends Promise<InventoryPreviousValues>,
    Fragmentable {
  prod_id: () => Promise<Int>;
  quan_in_stock: () => Promise<Int>;
  sales: () => Promise<Int>;
}

export interface InventoryPreviousValuesSubscription
  extends Promise<AsyncIterator<InventoryPreviousValues>>,
    Fragmentable {
  prod_id: () => Promise<AsyncIterator<Int>>;
  quan_in_stock: () => Promise<AsyncIterator<Int>>;
  sales: () => Promise<AsyncIterator<Int>>;
}

export interface InventorySubscriptionPayload {
  mutation: MutationType;
  node: Inventory;
  updatedFields: String[];
  previousValues: InventoryPreviousValues;
}

export interface InventorySubscriptionPayloadPromise
  extends Promise<InventorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InventoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InventoryPreviousValuesPromise>() => T;
}

export interface InventorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InventorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InventorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InventoryPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoriesPreviousValues {
  category?: Int;
  categoryname: String;
}

export interface CategoriesPreviousValuesPromise
  extends Promise<CategoriesPreviousValues>,
    Fragmentable {
  category: () => Promise<Int>;
  categoryname: () => Promise<String>;
}

export interface CategoriesPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoriesPreviousValues>>,
    Fragmentable {
  category: () => Promise<AsyncIterator<Int>>;
  categoryname: () => Promise<AsyncIterator<String>>;
}

export interface ReorderEdge {
  node: Reorder;
  cursor: String;
}

export interface ReorderEdgePromise extends Promise<ReorderEdge>, Fragmentable {
  node: <T = ReorderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReorderEdgeSubscription
  extends Promise<AsyncIterator<ReorderEdge>>,
    Fragmentable {
  node: <T = ReorderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Inventory {
  prod_id: Int;
  quan_in_stock: Int;
  sales: Int;
}

export interface InventoryPromise extends Promise<Inventory>, Fragmentable {
  prod_id: () => Promise<Int>;
  quan_in_stock: () => Promise<Int>;
  sales: () => Promise<Int>;
  products: <T = ProductsPromise>() => T;
}

export interface InventorySubscription
  extends Promise<AsyncIterator<Inventory>>,
    Fragmentable {
  prod_id: () => Promise<AsyncIterator<Int>>;
  quan_in_stock: () => Promise<AsyncIterator<Int>>;
  sales: () => Promise<AsyncIterator<Int>>;
  products: <T = ProductsSubscription>() => T;
}

export interface Products {
  prod_id: Int;
  category: Int;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
}

export interface ProductsPromise extends Promise<Products>, Fragmentable {
  prod_id: () => Promise<Int>;
  category: () => Promise<Int>;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Int>;
  common_prod_id: () => Promise<Int>;
  reorder: <T = ReorderPromise>() => T;
  inventory: <T = InventoryPromise>() => T;
  categories: <T = CategoriesPromise>() => T;
}

export interface ProductsSubscription
  extends Promise<AsyncIterator<Products>>,
    Fragmentable {
  prod_id: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Int>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
  reorder: <T = ReorderSubscription>() => T;
  inventory: <T = InventorySubscription>() => T;
  categories: <T = CategoriesSubscription>() => T;
}

export interface ProductsEdge {
  node: Products;
  cursor: String;
}

export interface ProductsEdgePromise
  extends Promise<ProductsEdge>,
    Fragmentable {
  node: <T = ProductsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductsEdgeSubscription
  extends Promise<AsyncIterator<ProductsEdge>>,
    Fragmentable {
  node: <T = ProductsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductsPreviousValues {
  prod_id: Int;
  category: Int;
  title: String;
  actor: String;
  price: Float;
  special: Int;
  common_prod_id: Int;
}

export interface ProductsPreviousValuesPromise
  extends Promise<ProductsPreviousValues>,
    Fragmentable {
  prod_id: () => Promise<Int>;
  category: () => Promise<Int>;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Int>;
  common_prod_id: () => Promise<Int>;
}

export interface ProductsPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductsPreviousValues>>,
    Fragmentable {
  prod_id: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Int>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Products",
    embedded: false
  },
  {
    name: "Reorder",
    embedded: false
  },
  {
    name: "Inventory",
    embedded: false
  },
  {
    name: "Categories",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
