module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategories {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateProducts {
  count: Int!
}

type AggregateReorder {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Categories {
  category: Int
  categoryname: String!
  products: Products
}

type CategoriesConnection {
  pageInfo: PageInfo!
  edges: [CategoriesEdge]!
  aggregate: AggregateCategories!
}

input CategoriesCreateInput {
  category: Int
  categoryname: String!
  products: ProductsCreateOneWithoutCategoriesInput
}

input CategoriesCreateOneWithoutProductsInput {
  create: CategoriesCreateWithoutProductsInput
  connect: CategoriesWhereUniqueInput
}

input CategoriesCreateWithoutProductsInput {
  category: Int
  categoryname: String!
}

type CategoriesEdge {
  node: Categories!
  cursor: String!
}

enum CategoriesOrderByInput {
  category_ASC
  category_DESC
  categoryname_ASC
  categoryname_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoriesPreviousValues {
  category: Int
  categoryname: String!
}

type CategoriesSubscriptionPayload {
  mutation: MutationType!
  node: Categories
  updatedFields: [String!]
  previousValues: CategoriesPreviousValues
}

input CategoriesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoriesWhereInput
  AND: [CategoriesSubscriptionWhereInput!]
  OR: [CategoriesSubscriptionWhereInput!]
  NOT: [CategoriesSubscriptionWhereInput!]
}

input CategoriesUpdateInput {
  category: Int
  categoryname: String
  products: ProductsUpdateOneWithoutCategoriesInput
}

input CategoriesUpdateManyMutationInput {
  category: Int
  categoryname: String
}

input CategoriesUpdateOneWithoutProductsInput {
  create: CategoriesCreateWithoutProductsInput
  update: CategoriesUpdateWithoutProductsDataInput
  upsert: CategoriesUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoriesWhereUniqueInput
}

input CategoriesUpdateWithoutProductsDataInput {
  category: Int
  categoryname: String
}

input CategoriesUpsertWithoutProductsInput {
  update: CategoriesUpdateWithoutProductsDataInput!
  create: CategoriesCreateWithoutProductsInput!
}

input CategoriesWhereInput {
  category: Int
  category_not: Int
  category_in: [Int!]
  category_not_in: [Int!]
  category_lt: Int
  category_lte: Int
  category_gt: Int
  category_gte: Int
  categoryname: String
  categoryname_not: String
  categoryname_in: [String!]
  categoryname_not_in: [String!]
  categoryname_lt: String
  categoryname_lte: String
  categoryname_gt: String
  categoryname_gte: String
  categoryname_contains: String
  categoryname_not_contains: String
  categoryname_starts_with: String
  categoryname_not_starts_with: String
  categoryname_ends_with: String
  categoryname_not_ends_with: String
  products: ProductsWhereInput
  AND: [CategoriesWhereInput!]
  OR: [CategoriesWhereInput!]
  NOT: [CategoriesWhereInput!]
}

input CategoriesWhereUniqueInput {
  category: Int
}

scalar DateTime

type Inventory {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
  products: Products
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
  products: ProductsCreateOneWithoutInventoryInput
}

input InventoryCreateOneWithoutProductsInput {
  create: InventoryCreateWithoutProductsInput
  connect: InventoryWhereUniqueInput
}

input InventoryCreateWithoutProductsInput {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  prod_id_ASC
  prod_id_DESC
  quan_in_stock_ASC
  quan_in_stock_DESC
  sales_ASC
  sales_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateInput {
  prod_id: Int
  quan_in_stock: Int
  sales: Int
  products: ProductsUpdateOneWithoutInventoryInput
}

input InventoryUpdateManyMutationInput {
  prod_id: Int
  quan_in_stock: Int
  sales: Int
}

input InventoryUpdateOneWithoutProductsInput {
  create: InventoryCreateWithoutProductsInput
  update: InventoryUpdateWithoutProductsDataInput
  upsert: InventoryUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: InventoryWhereUniqueInput
}

input InventoryUpdateWithoutProductsDataInput {
  prod_id: Int
  quan_in_stock: Int
  sales: Int
}

input InventoryUpsertWithoutProductsInput {
  update: InventoryUpdateWithoutProductsDataInput!
  create: InventoryCreateWithoutProductsInput!
}

input InventoryWhereInput {
  prod_id: Int
  prod_id_not: Int
  prod_id_in: [Int!]
  prod_id_not_in: [Int!]
  prod_id_lt: Int
  prod_id_lte: Int
  prod_id_gt: Int
  prod_id_gte: Int
  quan_in_stock: Int
  quan_in_stock_not: Int
  quan_in_stock_in: [Int!]
  quan_in_stock_not_in: [Int!]
  quan_in_stock_lt: Int
  quan_in_stock_lte: Int
  quan_in_stock_gt: Int
  quan_in_stock_gte: Int
  sales: Int
  sales_not: Int
  sales_in: [Int!]
  sales_not_in: [Int!]
  sales_lt: Int
  sales_lte: Int
  sales_gt: Int
  sales_gte: Int
  products: ProductsWhereInput
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

input InventoryWhereUniqueInput {
  prod_id: Int
}

scalar Long

type Mutation {
  createCategories(data: CategoriesCreateInput!): Categories!
  updateCategories(data: CategoriesUpdateInput!, where: CategoriesWhereUniqueInput!): Categories
  updateManyCategorieses(data: CategoriesUpdateManyMutationInput!, where: CategoriesWhereInput): BatchPayload!
  upsertCategories(where: CategoriesWhereUniqueInput!, create: CategoriesCreateInput!, update: CategoriesUpdateInput!): Categories!
  deleteCategories(where: CategoriesWhereUniqueInput!): Categories
  deleteManyCategorieses(where: CategoriesWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createProducts(data: ProductsCreateInput!): Products!
  updateProducts(data: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products
  updateManyProductses(data: ProductsUpdateManyMutationInput!, where: ProductsWhereInput): BatchPayload!
  upsertProducts(where: ProductsWhereUniqueInput!, create: ProductsCreateInput!, update: ProductsUpdateInput!): Products!
  deleteProducts(where: ProductsWhereUniqueInput!): Products
  deleteManyProductses(where: ProductsWhereInput): BatchPayload!
  createReorder(data: ReorderCreateInput!): Reorder!
  updateReorder(data: ReorderUpdateInput!, where: ReorderWhereUniqueInput!): Reorder
  updateManyReorders(data: ReorderUpdateManyMutationInput!, where: ReorderWhereInput): BatchPayload!
  upsertReorder(where: ReorderWhereUniqueInput!, create: ReorderCreateInput!, update: ReorderUpdateInput!): Reorder!
  deleteReorder(where: ReorderWhereUniqueInput!): Reorder
  deleteManyReorders(where: ReorderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Products {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: Reorder
  inventory: Inventory
  categories: Categories
}

type ProductsConnection {
  pageInfo: PageInfo!
  edges: [ProductsEdge]!
  aggregate: AggregateProducts!
}

input ProductsCreateInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: ReorderCreateOneWithoutProductsInput
  inventory: InventoryCreateOneWithoutProductsInput
  categories: CategoriesCreateOneWithoutProductsInput
}

input ProductsCreateOneWithoutCategoriesInput {
  create: ProductsCreateWithoutCategoriesInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateOneWithoutInventoryInput {
  create: ProductsCreateWithoutInventoryInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateOneWithoutReorderInput {
  create: ProductsCreateWithoutReorderInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateWithoutCategoriesInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: ReorderCreateOneWithoutProductsInput
  inventory: InventoryCreateOneWithoutProductsInput
}

input ProductsCreateWithoutInventoryInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: ReorderCreateOneWithoutProductsInput
  categories: CategoriesCreateOneWithoutProductsInput
}

input ProductsCreateWithoutReorderInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  inventory: InventoryCreateOneWithoutProductsInput
  categories: CategoriesCreateOneWithoutProductsInput
}

type ProductsEdge {
  node: Products!
  cursor: String!
}

enum ProductsOrderByInput {
  prod_id_ASC
  prod_id_DESC
  category_ASC
  category_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  special_ASC
  special_DESC
  common_prod_id_ASC
  common_prod_id_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductsPreviousValues {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
}

type ProductsSubscriptionPayload {
  mutation: MutationType!
  node: Products
  updatedFields: [String!]
  previousValues: ProductsPreviousValues
}

input ProductsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductsWhereInput
  AND: [ProductsSubscriptionWhereInput!]
  OR: [ProductsSubscriptionWhereInput!]
  NOT: [ProductsSubscriptionWhereInput!]
}

input ProductsUpdateInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  reorder: ReorderUpdateOneWithoutProductsInput
  inventory: InventoryUpdateOneWithoutProductsInput
  categories: CategoriesUpdateOneWithoutProductsInput
}

input ProductsUpdateManyMutationInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
}

input ProductsUpdateOneWithoutCategoriesInput {
  create: ProductsCreateWithoutCategoriesInput
  update: ProductsUpdateWithoutCategoriesDataInput
  upsert: ProductsUpsertWithoutCategoriesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductsWhereUniqueInput
}

input ProductsUpdateOneWithoutInventoryInput {
  create: ProductsCreateWithoutInventoryInput
  update: ProductsUpdateWithoutInventoryDataInput
  upsert: ProductsUpsertWithoutInventoryInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductsWhereUniqueInput
}

input ProductsUpdateOneWithoutReorderInput {
  create: ProductsCreateWithoutReorderInput
  update: ProductsUpdateWithoutReorderDataInput
  upsert: ProductsUpsertWithoutReorderInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductsWhereUniqueInput
}

input ProductsUpdateWithoutCategoriesDataInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  reorder: ReorderUpdateOneWithoutProductsInput
  inventory: InventoryUpdateOneWithoutProductsInput
}

input ProductsUpdateWithoutInventoryDataInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  reorder: ReorderUpdateOneWithoutProductsInput
  categories: CategoriesUpdateOneWithoutProductsInput
}

input ProductsUpdateWithoutReorderDataInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  inventory: InventoryUpdateOneWithoutProductsInput
  categories: CategoriesUpdateOneWithoutProductsInput
}

input ProductsUpsertWithoutCategoriesInput {
  update: ProductsUpdateWithoutCategoriesDataInput!
  create: ProductsCreateWithoutCategoriesInput!
}

input ProductsUpsertWithoutInventoryInput {
  update: ProductsUpdateWithoutInventoryDataInput!
  create: ProductsCreateWithoutInventoryInput!
}

input ProductsUpsertWithoutReorderInput {
  update: ProductsUpdateWithoutReorderDataInput!
  create: ProductsCreateWithoutReorderInput!
}

input ProductsWhereInput {
  prod_id: Int
  prod_id_not: Int
  prod_id_in: [Int!]
  prod_id_not_in: [Int!]
  prod_id_lt: Int
  prod_id_lte: Int
  prod_id_gt: Int
  prod_id_gte: Int
  category: Int
  category_not: Int
  category_in: [Int!]
  category_not_in: [Int!]
  category_lt: Int
  category_lte: Int
  category_gt: Int
  category_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  special: Int
  special_not: Int
  special_in: [Int!]
  special_not_in: [Int!]
  special_lt: Int
  special_lte: Int
  special_gt: Int
  special_gte: Int
  common_prod_id: Int
  common_prod_id_not: Int
  common_prod_id_in: [Int!]
  common_prod_id_not_in: [Int!]
  common_prod_id_lt: Int
  common_prod_id_lte: Int
  common_prod_id_gt: Int
  common_prod_id_gte: Int
  reorder: ReorderWhereInput
  inventory: InventoryWhereInput
  categories: CategoriesWhereInput
  AND: [ProductsWhereInput!]
  OR: [ProductsWhereInput!]
  NOT: [ProductsWhereInput!]
}

input ProductsWhereUniqueInput {
  prod_id: Int
  category: Int
}

type Query {
  categories(where: CategoriesWhereUniqueInput!): Categories
  categorieses(where: CategoriesWhereInput, orderBy: CategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Categories]!
  categoriesesConnection(where: CategoriesWhereInput, orderBy: CategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoriesConnection!
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  products(where: ProductsWhereUniqueInput!): Products
  productses(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products]!
  productsesConnection(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductsConnection!
  reorder(where: ReorderWhereUniqueInput!): Reorder
  reorders(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reorder]!
  reordersConnection(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReorderConnection!
  node(id: ID!): Node
}

type Reorder {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: Int!
  date_expected: DateTime!
  products: Products
}

type ReorderConnection {
  pageInfo: PageInfo!
  edges: [ReorderEdge]!
  aggregate: AggregateReorder!
}

input ReorderCreateInput {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: Int!
  date_expected: DateTime!
  products: ProductsCreateOneWithoutReorderInput
}

input ReorderCreateOneWithoutProductsInput {
  create: ReorderCreateWithoutProductsInput
  connect: ReorderWhereUniqueInput
}

input ReorderCreateWithoutProductsInput {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: Int!
  date_expected: DateTime!
}

type ReorderEdge {
  node: Reorder!
  cursor: String!
}

enum ReorderOrderByInput {
  prod_id_ASC
  prod_id_DESC
  date_low_ASC
  date_low_DESC
  quan_low_ASC
  quan_low_DESC
  date_reordered_ASC
  date_reordered_DESC
  quan_reordered_ASC
  quan_reordered_DESC
  date_expected_ASC
  date_expected_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReorderPreviousValues {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: Int!
  date_expected: DateTime!
}

type ReorderSubscriptionPayload {
  mutation: MutationType!
  node: Reorder
  updatedFields: [String!]
  previousValues: ReorderPreviousValues
}

input ReorderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReorderWhereInput
  AND: [ReorderSubscriptionWhereInput!]
  OR: [ReorderSubscriptionWhereInput!]
  NOT: [ReorderSubscriptionWhereInput!]
}

input ReorderUpdateInput {
  prod_id: Int
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: Int
  date_expected: DateTime
  products: ProductsUpdateOneWithoutReorderInput
}

input ReorderUpdateManyMutationInput {
  prod_id: Int
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: Int
  date_expected: DateTime
}

input ReorderUpdateOneWithoutProductsInput {
  create: ReorderCreateWithoutProductsInput
  update: ReorderUpdateWithoutProductsDataInput
  upsert: ReorderUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: ReorderWhereUniqueInput
}

input ReorderUpdateWithoutProductsDataInput {
  prod_id: Int
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: Int
  date_expected: DateTime
}

input ReorderUpsertWithoutProductsInput {
  update: ReorderUpdateWithoutProductsDataInput!
  create: ReorderCreateWithoutProductsInput!
}

input ReorderWhereInput {
  prod_id: Int
  prod_id_not: Int
  prod_id_in: [Int!]
  prod_id_not_in: [Int!]
  prod_id_lt: Int
  prod_id_lte: Int
  prod_id_gt: Int
  prod_id_gte: Int
  date_low: DateTime
  date_low_not: DateTime
  date_low_in: [DateTime!]
  date_low_not_in: [DateTime!]
  date_low_lt: DateTime
  date_low_lte: DateTime
  date_low_gt: DateTime
  date_low_gte: DateTime
  quan_low: Int
  quan_low_not: Int
  quan_low_in: [Int!]
  quan_low_not_in: [Int!]
  quan_low_lt: Int
  quan_low_lte: Int
  quan_low_gt: Int
  quan_low_gte: Int
  date_reordered: DateTime
  date_reordered_not: DateTime
  date_reordered_in: [DateTime!]
  date_reordered_not_in: [DateTime!]
  date_reordered_lt: DateTime
  date_reordered_lte: DateTime
  date_reordered_gt: DateTime
  date_reordered_gte: DateTime
  quan_reordered: Int
  quan_reordered_not: Int
  quan_reordered_in: [Int!]
  quan_reordered_not_in: [Int!]
  quan_reordered_lt: Int
  quan_reordered_lte: Int
  quan_reordered_gt: Int
  quan_reordered_gte: Int
  date_expected: DateTime
  date_expected_not: DateTime
  date_expected_in: [DateTime!]
  date_expected_not_in: [DateTime!]
  date_expected_lt: DateTime
  date_expected_lte: DateTime
  date_expected_gt: DateTime
  date_expected_gte: DateTime
  products: ProductsWhereInput
  AND: [ReorderWhereInput!]
  OR: [ReorderWhereInput!]
  NOT: [ReorderWhereInput!]
}

input ReorderWhereUniqueInput {
  prod_id: Int
}

type Subscription {
  categories(where: CategoriesSubscriptionWhereInput): CategoriesSubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  products(where: ProductsSubscriptionWhereInput): ProductsSubscriptionPayload
  reorder(where: ReorderSubscriptionWhereInput): ReorderSubscriptionPayload
}
`
      }
    