module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderLine {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  categoryname: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  categoryname: String!
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutProductsInput {
  categoryname: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  categoryname_ASC
  categoryname_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  categoryname: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  categoryname: String
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  categoryname: String
}

input CategoryUpdateOneWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  update: CategoryUpdateWithoutProductsDataInput
  upsert: CategoryUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutProductsDataInput {
  categoryname: String
}

input CategoryUpsertWithoutProductsInput {
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  categoryname: String
  categoryname_not: String
  categoryname_in: [String!]
  categoryname_not_in: [String!]
  categoryname_lt: String
  categoryname_lte: String
  categoryname_gt: String
  categoryname_gte: String
  categoryname_contains: String
  categoryname_not_contains: String
  categoryname_starts_with: String
  categoryname_not_starts_with: String
  categoryname_ends_with: String
  categoryname_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Customer {
  id: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String
  city: String!
  state: String
  zip: Int!
  country: String!
  region: String
  email: String!
  creditcardtype: Int!
  creditcard: String!
  creditcardexpiration: String!
  username: String!
  password: String!
  age: Int
  income: Int
  gender: Boolean
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  firstname: String!
  lastname: String!
  address1: String!
  address2: String
  city: String!
  state: String
  zip: Int!
  country: String!
  region: String
  email: String!
  creditcardtype: Int!
  creditcard: String!
  creditcardexpiration: String!
  username: String!
  password: String!
  age: Int
  income: Int
  gender: Boolean
  orders: OrderCreateManyWithoutCustomerInput
}

input CustomerCreateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutOrdersInput {
  firstname: String!
  lastname: String!
  address1: String!
  address2: String
  city: String!
  state: String
  zip: Int!
  country: String!
  region: String
  email: String!
  creditcardtype: Int!
  creditcard: String!
  creditcardexpiration: String!
  username: String!
  password: String!
  age: Int
  income: Int
  gender: Boolean
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  country_ASC
  country_DESC
  region_ASC
  region_DESC
  email_ASC
  email_DESC
  creditcardtype_ASC
  creditcardtype_DESC
  creditcard_ASC
  creditcard_DESC
  creditcardexpiration_ASC
  creditcardexpiration_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  income_ASC
  income_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String
  city: String!
  state: String
  zip: Int!
  country: String!
  region: String
  email: String!
  creditcardtype: Int!
  creditcard: String!
  creditcardexpiration: String!
  username: String!
  password: String!
  age: Int
  income: Int
  gender: Boolean
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateInput {
  firstname: String
  lastname: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  country: String
  region: String
  email: String
  creditcardtype: Int
  creditcard: String
  creditcardexpiration: String
  username: String
  password: String
  age: Int
  income: Int
  gender: Boolean
  orders: OrderUpdateManyWithoutCustomerInput
}

input CustomerUpdateManyMutationInput {
  firstname: String
  lastname: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  country: String
  region: String
  email: String
  creditcardtype: Int
  creditcard: String
  creditcardexpiration: String
  username: String
  password: String
  age: Int
  income: Int
  gender: Boolean
}

input CustomerUpdateOneRequiredWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  update: CustomerUpdateWithoutOrdersDataInput
  upsert: CustomerUpsertWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateWithoutOrdersDataInput {
  firstname: String
  lastname: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  country: String
  region: String
  email: String
  creditcardtype: Int
  creditcard: String
  creditcardexpiration: String
  username: String
  password: String
  age: Int
  income: Int
  gender: Boolean
}

input CustomerUpsertWithoutOrdersInput {
  update: CustomerUpdateWithoutOrdersDataInput!
  create: CustomerCreateWithoutOrdersInput!
}

input CustomerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  address1: String
  address1_not: String
  address1_in: [String!]
  address1_not_in: [String!]
  address1_lt: String
  address1_lte: String
  address1_gt: String
  address1_gte: String
  address1_contains: String
  address1_not_contains: String
  address1_starts_with: String
  address1_not_starts_with: String
  address1_ends_with: String
  address1_not_ends_with: String
  address2: String
  address2_not: String
  address2_in: [String!]
  address2_not_in: [String!]
  address2_lt: String
  address2_lte: String
  address2_gt: String
  address2_gte: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zip: Int
  zip_not: Int
  zip_in: [Int!]
  zip_not_in: [Int!]
  zip_lt: Int
  zip_lte: Int
  zip_gt: Int
  zip_gte: Int
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  creditcardtype: Int
  creditcardtype_not: Int
  creditcardtype_in: [Int!]
  creditcardtype_not_in: [Int!]
  creditcardtype_lt: Int
  creditcardtype_lte: Int
  creditcardtype_gt: Int
  creditcardtype_gte: Int
  creditcard: String
  creditcard_not: String
  creditcard_in: [String!]
  creditcard_not_in: [String!]
  creditcard_lt: String
  creditcard_lte: String
  creditcard_gt: String
  creditcard_gte: String
  creditcard_contains: String
  creditcard_not_contains: String
  creditcard_starts_with: String
  creditcard_not_starts_with: String
  creditcard_ends_with: String
  creditcard_not_ends_with: String
  creditcardexpiration: String
  creditcardexpiration_not: String
  creditcardexpiration_in: [String!]
  creditcardexpiration_not_in: [String!]
  creditcardexpiration_lt: String
  creditcardexpiration_lte: String
  creditcardexpiration_gt: String
  creditcardexpiration_gte: String
  creditcardexpiration_contains: String
  creditcardexpiration_not_contains: String
  creditcardexpiration_starts_with: String
  creditcardexpiration_not_starts_with: String
  creditcardexpiration_ends_with: String
  creditcardexpiration_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  income: Int
  income_not: Int
  income_in: [Int!]
  income_not_in: [Int!]
  income_lt: Int
  income_lte: Int
  income_gt: Int
  income_gte: Int
  gender: Boolean
  gender_not: Boolean
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderLine(data: OrderLineCreateInput!): OrderLine!
  updateOrderLine(data: OrderLineUpdateInput!, where: OrderLineWhereUniqueInput!): OrderLine
  updateManyOrderLines(data: OrderLineUpdateManyMutationInput!, where: OrderLineWhereInput): BatchPayload!
  upsertOrderLine(where: OrderLineWhereUniqueInput!, create: OrderLineCreateInput!, update: OrderLineUpdateInput!): OrderLine!
  deleteOrderLine(where: OrderLineWhereUniqueInput!): OrderLine
  deleteManyOrderLines(where: OrderLineWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  orderdate: String
  netamount: Float!
  tax: Float!
  totalamount: Float!
  customer: Customer!
  orderLines(where: OrderLineWhereInput, orderBy: OrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLine!]
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  orderdate: String
  netamount: Float!
  tax: Float!
  totalamount: Float!
  customer: CustomerCreateOneWithoutOrdersInput!
  orderLines: OrderLineCreateManyWithoutOrderInput
}

input OrderCreateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutOrderLinesInput {
  create: OrderCreateWithoutOrderLinesInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCustomerInput {
  orderdate: String
  netamount: Float!
  tax: Float!
  totalamount: Float!
  orderLines: OrderLineCreateManyWithoutOrderInput
}

input OrderCreateWithoutOrderLinesInput {
  orderdate: String
  netamount: Float!
  tax: Float!
  totalamount: Float!
  customer: CustomerCreateOneWithoutOrdersInput!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type OrderLine {
  id: ID!
  quantity: Int!
  orderdate: String
  product: Product!
  order: Order!
}

type OrderLineConnection {
  pageInfo: PageInfo!
  edges: [OrderLineEdge]!
  aggregate: AggregateOrderLine!
}

input OrderLineCreateInput {
  quantity: Int!
  orderdate: String
  product: ProductCreateOneWithoutProductorderlinesInput!
  order: OrderCreateOneWithoutOrderLinesInput!
}

input OrderLineCreateManyWithoutOrderInput {
  create: [OrderLineCreateWithoutOrderInput!]
  connect: [OrderLineWhereUniqueInput!]
}

input OrderLineCreateManyWithoutProductInput {
  create: [OrderLineCreateWithoutProductInput!]
  connect: [OrderLineWhereUniqueInput!]
}

input OrderLineCreateWithoutOrderInput {
  quantity: Int!
  orderdate: String
  product: ProductCreateOneWithoutProductorderlinesInput!
}

input OrderLineCreateWithoutProductInput {
  quantity: Int!
  orderdate: String
  order: OrderCreateOneWithoutOrderLinesInput!
}

type OrderLineEdge {
  node: OrderLine!
  cursor: String!
}

enum OrderLineOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  orderdate_ASC
  orderdate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderLinePreviousValues {
  id: ID!
  quantity: Int!
  orderdate: String
}

input OrderLineScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  orderdate: String
  orderdate_not: String
  orderdate_in: [String!]
  orderdate_not_in: [String!]
  orderdate_lt: String
  orderdate_lte: String
  orderdate_gt: String
  orderdate_gte: String
  orderdate_contains: String
  orderdate_not_contains: String
  orderdate_starts_with: String
  orderdate_not_starts_with: String
  orderdate_ends_with: String
  orderdate_not_ends_with: String
  AND: [OrderLineScalarWhereInput!]
  OR: [OrderLineScalarWhereInput!]
  NOT: [OrderLineScalarWhereInput!]
}

type OrderLineSubscriptionPayload {
  mutation: MutationType!
  node: OrderLine
  updatedFields: [String!]
  previousValues: OrderLinePreviousValues
}

input OrderLineSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderLineWhereInput
  AND: [OrderLineSubscriptionWhereInput!]
  OR: [OrderLineSubscriptionWhereInput!]
  NOT: [OrderLineSubscriptionWhereInput!]
}

input OrderLineUpdateInput {
  quantity: Int
  orderdate: String
  product: ProductUpdateOneRequiredWithoutProductorderlinesInput
  order: OrderUpdateOneRequiredWithoutOrderLinesInput
}

input OrderLineUpdateManyDataInput {
  quantity: Int
  orderdate: String
}

input OrderLineUpdateManyMutationInput {
  quantity: Int
  orderdate: String
}

input OrderLineUpdateManyWithoutOrderInput {
  create: [OrderLineCreateWithoutOrderInput!]
  delete: [OrderLineWhereUniqueInput!]
  connect: [OrderLineWhereUniqueInput!]
  set: [OrderLineWhereUniqueInput!]
  disconnect: [OrderLineWhereUniqueInput!]
  update: [OrderLineUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [OrderLineUpsertWithWhereUniqueWithoutOrderInput!]
  deleteMany: [OrderLineScalarWhereInput!]
  updateMany: [OrderLineUpdateManyWithWhereNestedInput!]
}

input OrderLineUpdateManyWithoutProductInput {
  create: [OrderLineCreateWithoutProductInput!]
  delete: [OrderLineWhereUniqueInput!]
  connect: [OrderLineWhereUniqueInput!]
  set: [OrderLineWhereUniqueInput!]
  disconnect: [OrderLineWhereUniqueInput!]
  update: [OrderLineUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [OrderLineUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [OrderLineScalarWhereInput!]
  updateMany: [OrderLineUpdateManyWithWhereNestedInput!]
}

input OrderLineUpdateManyWithWhereNestedInput {
  where: OrderLineScalarWhereInput!
  data: OrderLineUpdateManyDataInput!
}

input OrderLineUpdateWithoutOrderDataInput {
  quantity: Int
  orderdate: String
  product: ProductUpdateOneRequiredWithoutProductorderlinesInput
}

input OrderLineUpdateWithoutProductDataInput {
  quantity: Int
  orderdate: String
  order: OrderUpdateOneRequiredWithoutOrderLinesInput
}

input OrderLineUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderLineWhereUniqueInput!
  data: OrderLineUpdateWithoutOrderDataInput!
}

input OrderLineUpdateWithWhereUniqueWithoutProductInput {
  where: OrderLineWhereUniqueInput!
  data: OrderLineUpdateWithoutProductDataInput!
}

input OrderLineUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderLineWhereUniqueInput!
  update: OrderLineUpdateWithoutOrderDataInput!
  create: OrderLineCreateWithoutOrderInput!
}

input OrderLineUpsertWithWhereUniqueWithoutProductInput {
  where: OrderLineWhereUniqueInput!
  update: OrderLineUpdateWithoutProductDataInput!
  create: OrderLineCreateWithoutProductInput!
}

input OrderLineWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  orderdate: String
  orderdate_not: String
  orderdate_in: [String!]
  orderdate_not_in: [String!]
  orderdate_lt: String
  orderdate_lte: String
  orderdate_gt: String
  orderdate_gte: String
  orderdate_contains: String
  orderdate_not_contains: String
  orderdate_starts_with: String
  orderdate_not_starts_with: String
  orderdate_ends_with: String
  orderdate_not_ends_with: String
  product: ProductWhereInput
  order: OrderWhereInput
  AND: [OrderLineWhereInput!]
  OR: [OrderLineWhereInput!]
  NOT: [OrderLineWhereInput!]
}

input OrderLineWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  orderdate_ASC
  orderdate_DESC
  netamount_ASC
  netamount_DESC
  tax_ASC
  tax_DESC
  totalamount_ASC
  totalamount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  orderdate: String
  netamount: Float!
  tax: Float!
  totalamount: Float!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  orderdate: String
  orderdate_not: String
  orderdate_in: [String!]
  orderdate_not_in: [String!]
  orderdate_lt: String
  orderdate_lte: String
  orderdate_gt: String
  orderdate_gte: String
  orderdate_contains: String
  orderdate_not_contains: String
  orderdate_starts_with: String
  orderdate_not_starts_with: String
  orderdate_ends_with: String
  orderdate_not_ends_with: String
  netamount: Float
  netamount_not: Float
  netamount_in: [Float!]
  netamount_not_in: [Float!]
  netamount_lt: Float
  netamount_lte: Float
  netamount_gt: Float
  netamount_gte: Float
  tax: Float
  tax_not: Float
  tax_in: [Float!]
  tax_not_in: [Float!]
  tax_lt: Float
  tax_lte: Float
  tax_gt: Float
  tax_gte: Float
  totalamount: Float
  totalamount_not: Float
  totalamount_in: [Float!]
  totalamount_not_in: [Float!]
  totalamount_lt: Float
  totalamount_lte: Float
  totalamount_gt: Float
  totalamount_gte: Float
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  orderdate: String
  netamount: Float
  tax: Float
  totalamount: Float
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  orderLines: OrderLineUpdateManyWithoutOrderInput
}

input OrderUpdateManyDataInput {
  orderdate: String
  netamount: Float
  tax: Float
  totalamount: Float
}

input OrderUpdateManyMutationInput {
  orderdate: String
  netamount: Float
  tax: Float
  totalamount: Float
}

input OrderUpdateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateOneRequiredWithoutOrderLinesInput {
  create: OrderCreateWithoutOrderLinesInput
  update: OrderUpdateWithoutOrderLinesDataInput
  upsert: OrderUpsertWithoutOrderLinesInput
  connect: OrderWhereUniqueInput
}

input OrderUpdateWithoutCustomerDataInput {
  orderdate: String
  netamount: Float
  tax: Float
  totalamount: Float
  orderLines: OrderLineUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutOrderLinesDataInput {
  orderdate: String
  netamount: Float
  tax: Float
  totalamount: Float
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCustomerDataInput!
}

input OrderUpsertWithoutOrderLinesInput {
  update: OrderUpdateWithoutOrderLinesDataInput!
  create: OrderCreateWithoutOrderLinesInput!
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCustomerDataInput!
  create: OrderCreateWithoutCustomerInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  orderdate: String
  orderdate_not: String
  orderdate_in: [String!]
  orderdate_not_in: [String!]
  orderdate_lt: String
  orderdate_lte: String
  orderdate_gt: String
  orderdate_gte: String
  orderdate_contains: String
  orderdate_not_contains: String
  orderdate_starts_with: String
  orderdate_not_starts_with: String
  orderdate_ends_with: String
  orderdate_not_ends_with: String
  netamount: Float
  netamount_not: Float
  netamount_in: [Float!]
  netamount_not_in: [Float!]
  netamount_lt: Float
  netamount_lte: Float
  netamount_gt: Float
  netamount_gte: Float
  tax: Float
  tax_not: Float
  tax_in: [Float!]
  tax_not_in: [Float!]
  tax_lt: Float
  tax_lte: Float
  tax_gt: Float
  tax_gte: Float
  totalamount: Float
  totalamount_not: Float
  totalamount_in: [Float!]
  totalamount_not_in: [Float!]
  totalamount_lt: Float
  totalamount_lte: Float
  totalamount_gt: Float
  totalamount_gte: Float
  customer: CustomerWhereInput
  orderLines_every: OrderLineWhereInput
  orderLines_some: OrderLineWhereInput
  orderLines_none: OrderLineWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  author: User
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  title: String!
  published: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  published: Boolean!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  published: Boolean
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  published: Boolean
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  title: String!
  actor: String
  price: Float!
  special: Int
  category: Category
  productorderlines(where: OrderLineWhereInput, orderBy: OrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLine!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  title: String!
  actor: String
  price: Float!
  special: Int
  category: CategoryCreateOneWithoutProductsInput
  productorderlines: OrderLineCreateManyWithoutProductInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutProductorderlinesInput {
  create: ProductCreateWithoutProductorderlinesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCategoryInput {
  title: String!
  actor: String
  price: Float!
  special: Int
  productorderlines: OrderLineCreateManyWithoutProductInput
}

input ProductCreateWithoutProductorderlinesInput {
  title: String!
  actor: String
  price: Float!
  special: Int
  category: CategoryCreateOneWithoutProductsInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  special_ASC
  special_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  actor: String
  price: Float!
  special: Int
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  special: Int
  special_not: Int
  special_in: [Int!]
  special_not_in: [Int!]
  special_lt: Int
  special_lte: Int
  special_gt: Int
  special_gte: Int
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  title: String
  actor: String
  price: Float
  special: Int
  category: CategoryUpdateOneWithoutProductsInput
  productorderlines: OrderLineUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  title: String
  actor: String
  price: Float
  special: Int
}

input ProductUpdateManyMutationInput {
  title: String
  actor: String
  price: Float
  special: Int
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutProductorderlinesInput {
  create: ProductCreateWithoutProductorderlinesInput
  update: ProductUpdateWithoutProductorderlinesDataInput
  upsert: ProductUpsertWithoutProductorderlinesInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutCategoryDataInput {
  title: String
  actor: String
  price: Float
  special: Int
  productorderlines: OrderLineUpdateManyWithoutProductInput
}

input ProductUpdateWithoutProductorderlinesDataInput {
  title: String
  actor: String
  price: Float
  special: Int
  category: CategoryUpdateOneWithoutProductsInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpsertWithoutProductorderlinesInput {
  update: ProductUpdateWithoutProductorderlinesDataInput!
  create: ProductCreateWithoutProductorderlinesInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  special: Int
  special_not: Int
  special_in: [Int!]
  special_not_in: [Int!]
  special_lt: Int
  special_lte: Int
  special_gt: Int
  special_gte: Int
  category: CategoryWhereInput
  productorderlines_every: OrderLineWhereInput
  productorderlines_some: OrderLineWhereInput
  productorderlines_none: OrderLineWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderLine(where: OrderLineWhereUniqueInput!): OrderLine
  orderLines(where: OrderLineWhereInput, orderBy: OrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLine]!
  orderLinesConnection(where: OrderLineWhereInput, orderBy: OrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderLineConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderLine(where: OrderLineSubscriptionWhereInput): OrderLineSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  name: String
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    