module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateRecorder {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  category: ID!
  categoryname: String!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  category: ID!
  categoryname: String!
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  category_ASC
  category_DESC
  categoryname_ASC
  categoryname_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  category: ID!
  categoryname: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateManyMutationInput {
  category: ID
  categoryname: String
}

input CategoryWhereInput {
  category: ID
  category_not: ID
  category_in: [ID!]
  category_not_in: [ID!]
  category_lt: ID
  category_lte: ID
  category_gt: ID
  category_gte: ID
  category_contains: ID
  category_not_contains: ID
  category_starts_with: ID
  category_not_starts_with: ID
  category_ends_with: ID
  category_not_ends_with: ID
  categoryname: String
  categoryname_not: String
  categoryname_in: [String!]
  categoryname_not_in: [String!]
  categoryname_lt: String
  categoryname_lte: String
  categoryname_gt: String
  categoryname_gte: String
  categoryname_contains: String
  categoryname_not_contains: String
  categoryname_starts_with: String
  categoryname_not_starts_with: String
  categoryname_ends_with: String
  categoryname_not_ends_with: String
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

scalar DateTime

type Inventory {
  inventory_id: ID!
  quan_in_stock: Int!
  sales: Int!
  product: Product!
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  inventory_id: ID!
  quan_in_stock: Int!
  sales: Int!
  product: ProductCreateOneInput!
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  inventory_id_ASC
  inventory_id_DESC
  quan_in_stock_ASC
  quan_in_stock_DESC
  sales_ASC
  sales_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  inventory_id: ID!
  quan_in_stock: Int!
  sales: Int!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateManyMutationInput {
  inventory_id: ID
  quan_in_stock: Int
  sales: Int
}

input InventoryWhereInput {
  inventory_id: ID
  inventory_id_not: ID
  inventory_id_in: [ID!]
  inventory_id_not_in: [ID!]
  inventory_id_lt: ID
  inventory_id_lte: ID
  inventory_id_gt: ID
  inventory_id_gte: ID
  inventory_id_contains: ID
  inventory_id_not_contains: ID
  inventory_id_starts_with: ID
  inventory_id_not_starts_with: ID
  inventory_id_ends_with: ID
  inventory_id_not_ends_with: ID
  quan_in_stock: Int
  quan_in_stock_not: Int
  quan_in_stock_in: [Int!]
  quan_in_stock_not_in: [Int!]
  quan_in_stock_lt: Int
  quan_in_stock_lte: Int
  quan_in_stock_gt: Int
  quan_in_stock_gte: Int
  sales: Int
  sales_not: Int
  sales_in: [Int!]
  sales_not_in: [Int!]
  sales_lt: Int
  sales_lte: Int
  sales_gt: Int
  sales_gte: Int
  product: ProductWhereInput
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createRecorder(data: RecorderCreateInput!): Recorder!
  updateManyRecorders(data: RecorderUpdateManyMutationInput!, where: RecorderWhereInput): BatchPayload!
  deleteManyRecorders(where: RecorderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  prod_id: ID!
  category: Category!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  prod_id: ID!
  category: CategoryCreateOneInput!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
}

input ProductCreateOneInput {
  create: ProductCreateInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  prod_id_ASC
  prod_id_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  special_ASC
  special_DESC
  common_prod_id_ASC
  common_prod_id_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  prod_id: ID!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateManyMutationInput {
  prod_id: ID
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
}

input ProductWhereInput {
  prod_id: ID
  prod_id_not: ID
  prod_id_in: [ID!]
  prod_id_not_in: [ID!]
  prod_id_lt: ID
  prod_id_lte: ID
  prod_id_gt: ID
  prod_id_gte: ID
  prod_id_contains: ID
  prod_id_not_contains: ID
  prod_id_starts_with: ID
  prod_id_not_starts_with: ID
  prod_id_ends_with: ID
  prod_id_not_ends_with: ID
  category: CategoryWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  special: Int
  special_not: Int
  special_in: [Int!]
  special_not_in: [Int!]
  special_lt: Int
  special_lte: Int
  special_gt: Int
  special_gte: Int
  common_prod_id: Int
  common_prod_id_not: Int
  common_prod_id_in: [Int!]
  common_prod_id_not_in: [Int!]
  common_prod_id_lt: Int
  common_prod_id_lte: Int
  common_prod_id_gt: Int
  common_prod_id_gte: Int
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

type Query {
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  recorders(where: RecorderWhereInput, orderBy: RecorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recorder]!
  recordersConnection(where: RecorderWhereInput, orderBy: RecorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecorderConnection!
  node(id: ID!): Node
}

type Recorder {
  recorder_id: ID!
  date_low: DateTime!
  quan_low: Int!
  date_recorded: DateTime!
  quan_recorded: Int!
  date_expected: DateTime!
  product: Product!
}

type RecorderConnection {
  pageInfo: PageInfo!
  edges: [RecorderEdge]!
  aggregate: AggregateRecorder!
}

input RecorderCreateInput {
  recorder_id: ID!
  date_low: DateTime!
  quan_low: Int!
  date_recorded: DateTime!
  quan_recorded: Int!
  date_expected: DateTime!
  product: ProductCreateOneInput!
}

type RecorderEdge {
  node: Recorder!
  cursor: String!
}

enum RecorderOrderByInput {
  recorder_id_ASC
  recorder_id_DESC
  date_low_ASC
  date_low_DESC
  quan_low_ASC
  quan_low_DESC
  date_recorded_ASC
  date_recorded_DESC
  quan_recorded_ASC
  quan_recorded_DESC
  date_expected_ASC
  date_expected_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecorderPreviousValues {
  recorder_id: ID!
  date_low: DateTime!
  quan_low: Int!
  date_recorded: DateTime!
  quan_recorded: Int!
  date_expected: DateTime!
}

type RecorderSubscriptionPayload {
  mutation: MutationType!
  node: Recorder
  updatedFields: [String!]
  previousValues: RecorderPreviousValues
}

input RecorderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecorderWhereInput
  AND: [RecorderSubscriptionWhereInput!]
  OR: [RecorderSubscriptionWhereInput!]
  NOT: [RecorderSubscriptionWhereInput!]
}

input RecorderUpdateManyMutationInput {
  recorder_id: ID
  date_low: DateTime
  quan_low: Int
  date_recorded: DateTime
  quan_recorded: Int
  date_expected: DateTime
}

input RecorderWhereInput {
  recorder_id: ID
  recorder_id_not: ID
  recorder_id_in: [ID!]
  recorder_id_not_in: [ID!]
  recorder_id_lt: ID
  recorder_id_lte: ID
  recorder_id_gt: ID
  recorder_id_gte: ID
  recorder_id_contains: ID
  recorder_id_not_contains: ID
  recorder_id_starts_with: ID
  recorder_id_not_starts_with: ID
  recorder_id_ends_with: ID
  recorder_id_not_ends_with: ID
  date_low: DateTime
  date_low_not: DateTime
  date_low_in: [DateTime!]
  date_low_not_in: [DateTime!]
  date_low_lt: DateTime
  date_low_lte: DateTime
  date_low_gt: DateTime
  date_low_gte: DateTime
  quan_low: Int
  quan_low_not: Int
  quan_low_in: [Int!]
  quan_low_not_in: [Int!]
  quan_low_lt: Int
  quan_low_lte: Int
  quan_low_gt: Int
  quan_low_gte: Int
  date_recorded: DateTime
  date_recorded_not: DateTime
  date_recorded_in: [DateTime!]
  date_recorded_not_in: [DateTime!]
  date_recorded_lt: DateTime
  date_recorded_lte: DateTime
  date_recorded_gt: DateTime
  date_recorded_gte: DateTime
  quan_recorded: Int
  quan_recorded_not: Int
  quan_recorded_in: [Int!]
  quan_recorded_not_in: [Int!]
  quan_recorded_lt: Int
  quan_recorded_lte: Int
  quan_recorded_gt: Int
  quan_recorded_gte: Int
  date_expected: DateTime
  date_expected_not: DateTime
  date_expected_in: [DateTime!]
  date_expected_not_in: [DateTime!]
  date_expected_lt: DateTime
  date_expected_lte: DateTime
  date_expected_gt: DateTime
  date_expected_gte: DateTime
  product: ProductWhereInput
  AND: [RecorderWhereInput!]
  OR: [RecorderWhereInput!]
  NOT: [RecorderWhereInput!]
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  recorder(where: RecorderSubscriptionWhereInput): RecorderSubscriptionPayload
}
`
      }
    