module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateReorder {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  name: String!
  products: ProductCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutProductsInput {
  create: [CategoryCreateWithoutProductsInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutProductsInput {
  name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  name: String
  products: ProductUpdateManyWithoutCategoriesInput
}

input CategoryUpdateManyDataInput {
  name: String
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateManyWithoutProductsInput {
  create: [CategoryCreateWithoutProductsInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithoutProductsDataInput {
  name: String
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutProductsDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

scalar DateTime

type Inventory {
  product: Product
  stock_qty: Int!
  sales: Int!
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  product: ProductCreateOneInput
  stock_qty: Int!
  sales: Int!
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  stock_qty_ASC
  stock_qty_DESC
  sales_ASC
  sales_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  stock_qty: Int!
  sales: Int!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateManyMutationInput {
  stock_qty: Int
  sales: Int
}

input InventoryWhereInput {
  product: ProductWhereInput
  stock_qty: Int
  stock_qty_not: Int
  stock_qty_in: [Int!]
  stock_qty_not_in: [Int!]
  stock_qty_lt: Int
  stock_qty_lte: Int
  stock_qty_gt: Int
  stock_qty_gte: Int
  sales: Int
  sales_not: Int
  sales_in: [Int!]
  sales_not_in: [Int!]
  sales_lt: Int
  sales_lte: Int
  sales_gt: Int
  sales_gte: Int
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createReorder(data: ReorderCreateInput!): Reorder!
  updateManyReorders(data: ReorderUpdateManyMutationInput!, where: ReorderWhereInput): BatchPayload!
  deleteManyReorders(where: ReorderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prods(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  reorders(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reorder!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prods: ProductCreateManyInput
  categories: CategoryCreateManyWithoutProductsInput
  reorders: ReorderCreateManyWithoutProductInput
}

input ProductCreateManyInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutReordersInput {
  create: ProductCreateWithoutReordersInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCategoriesInput {
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prods: ProductCreateManyInput
  reorders: ReorderCreateManyWithoutProductInput
}

input ProductCreateWithoutReordersInput {
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prods: ProductCreateManyInput
  categories: CategoryCreateManyWithoutProductsInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  special_ASC
  special_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  actor: String!
  price: Float!
  special: Int!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  special: Int
  special_not: Int
  special_in: [Int!]
  special_not_in: [Int!]
  special_lt: Int
  special_lte: Int
  special_gt: Int
  special_gte: Int
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  title: String
  actor: String
  price: Float
  special: Int
  common_prods: ProductUpdateManyInput
  categories: CategoryUpdateManyWithoutProductsInput
  reorders: ReorderUpdateManyWithoutProductInput
}

input ProductUpdateInput {
  title: String
  actor: String
  price: Float
  special: Int
  common_prods: ProductUpdateManyInput
  categories: CategoryUpdateManyWithoutProductsInput
  reorders: ReorderUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  title: String
  actor: String
  price: Float
  special: Int
}

input ProductUpdateManyInput {
  create: [ProductCreateInput!]
  update: [ProductUpdateWithWhereUniqueNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueNestedInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyMutationInput {
  title: String
  actor: String
  price: Float
  special: Int
}

input ProductUpdateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateWithoutCategoriesDataInput {
  title: String
  actor: String
  price: Float
  special: Int
  common_prods: ProductUpdateManyInput
  reorders: ReorderUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateDataInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoriesDataInput!
}

input ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoriesDataInput!
  create: ProductCreateWithoutCategoriesInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  special: Int
  special_not: Int
  special_in: [Int!]
  special_not_in: [Int!]
  special_lt: Int
  special_lte: Int
  special_gt: Int
  special_gte: Int
  common_prods_every: ProductWhereInput
  common_prods_some: ProductWhereInput
  common_prods_none: ProductWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  reorders_every: ReorderWhereInput
  reorders_some: ReorderWhereInput
  reorders_none: ReorderWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  reorders(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reorder]!
  reordersConnection(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReorderConnection!
  node(id: ID!): Node
}

type Reorder {
  date: DateTime!
  quantity: Int!
  reorder_date: DateTime!
  reorder_quantity: Int!
  expected_date: DateTime!
  product: Product
}

type ReorderConnection {
  pageInfo: PageInfo!
  edges: [ReorderEdge]!
  aggregate: AggregateReorder!
}

input ReorderCreateInput {
  date: DateTime!
  quantity: Int!
  reorder_date: DateTime!
  reorder_quantity: Int!
  expected_date: DateTime!
  product: ProductCreateOneWithoutReordersInput
}

input ReorderCreateManyWithoutProductInput {
  create: [ReorderCreateWithoutProductInput!]
}

input ReorderCreateWithoutProductInput {
  date: DateTime!
  quantity: Int!
  reorder_date: DateTime!
  reorder_quantity: Int!
  expected_date: DateTime!
}

type ReorderEdge {
  node: Reorder!
  cursor: String!
}

enum ReorderOrderByInput {
  date_ASC
  date_DESC
  quantity_ASC
  quantity_DESC
  reorder_date_ASC
  reorder_date_DESC
  reorder_quantity_ASC
  reorder_quantity_DESC
  expected_date_ASC
  expected_date_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReorderPreviousValues {
  date: DateTime!
  quantity: Int!
  reorder_date: DateTime!
  reorder_quantity: Int!
  expected_date: DateTime!
}

input ReorderScalarWhereInput {
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  reorder_date: DateTime
  reorder_date_not: DateTime
  reorder_date_in: [DateTime!]
  reorder_date_not_in: [DateTime!]
  reorder_date_lt: DateTime
  reorder_date_lte: DateTime
  reorder_date_gt: DateTime
  reorder_date_gte: DateTime
  reorder_quantity: Int
  reorder_quantity_not: Int
  reorder_quantity_in: [Int!]
  reorder_quantity_not_in: [Int!]
  reorder_quantity_lt: Int
  reorder_quantity_lte: Int
  reorder_quantity_gt: Int
  reorder_quantity_gte: Int
  expected_date: DateTime
  expected_date_not: DateTime
  expected_date_in: [DateTime!]
  expected_date_not_in: [DateTime!]
  expected_date_lt: DateTime
  expected_date_lte: DateTime
  expected_date_gt: DateTime
  expected_date_gte: DateTime
  AND: [ReorderScalarWhereInput!]
  OR: [ReorderScalarWhereInput!]
  NOT: [ReorderScalarWhereInput!]
}

type ReorderSubscriptionPayload {
  mutation: MutationType!
  node: Reorder
  updatedFields: [String!]
  previousValues: ReorderPreviousValues
}

input ReorderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReorderWhereInput
  AND: [ReorderSubscriptionWhereInput!]
  OR: [ReorderSubscriptionWhereInput!]
  NOT: [ReorderSubscriptionWhereInput!]
}

input ReorderUpdateManyDataInput {
  date: DateTime
  quantity: Int
  reorder_date: DateTime
  reorder_quantity: Int
  expected_date: DateTime
}

input ReorderUpdateManyMutationInput {
  date: DateTime
  quantity: Int
  reorder_date: DateTime
  reorder_quantity: Int
  expected_date: DateTime
}

input ReorderUpdateManyWithoutProductInput {
  create: [ReorderCreateWithoutProductInput!]
  deleteMany: [ReorderScalarWhereInput!]
  updateMany: [ReorderUpdateManyWithWhereNestedInput!]
}

input ReorderUpdateManyWithWhereNestedInput {
  where: ReorderScalarWhereInput!
  data: ReorderUpdateManyDataInput!
}

input ReorderWhereInput {
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  reorder_date: DateTime
  reorder_date_not: DateTime
  reorder_date_in: [DateTime!]
  reorder_date_not_in: [DateTime!]
  reorder_date_lt: DateTime
  reorder_date_lte: DateTime
  reorder_date_gt: DateTime
  reorder_date_gte: DateTime
  reorder_quantity: Int
  reorder_quantity_not: Int
  reorder_quantity_in: [Int!]
  reorder_quantity_not_in: [Int!]
  reorder_quantity_lt: Int
  reorder_quantity_lte: Int
  reorder_quantity_gt: Int
  reorder_quantity_gte: Int
  expected_date: DateTime
  expected_date_not: DateTime
  expected_date_in: [DateTime!]
  expected_date_not_in: [DateTime!]
  expected_date_lt: DateTime
  expected_date_lte: DateTime
  expected_date_gt: DateTime
  expected_date_gte: DateTime
  product: ProductWhereInput
  AND: [ReorderWhereInput!]
  OR: [ReorderWhereInput!]
  NOT: [ReorderWhereInput!]
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  reorder(where: ReorderSubscriptionWhereInput): ReorderSubscriptionPayload
}
`
      }
    