module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateCust_hist {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateOrderlines {
  count: Int!
}

type AggregateOrders {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateReorder {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  category: ID!
  catergoryName: String!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  category: ID!
  catergoryName: String!
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  category_ASC
  category_DESC
  catergoryName_ASC
  catergoryName_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  category: ID!
  catergoryName: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateManyMutationInput {
  category: ID
  catergoryName: String
}

input CategoryWhereInput {
  category: ID
  category_not: ID
  category_in: [ID!]
  category_not_in: [ID!]
  category_lt: ID
  category_lte: ID
  category_gt: ID
  category_gte: ID
  category_contains: ID
  category_not_contains: ID
  category_starts_with: ID
  category_not_starts_with: ID
  category_ends_with: ID
  category_not_ends_with: ID
  catergoryName: String
  catergoryName_not: String
  catergoryName_in: [String!]
  catergoryName_not_in: [String!]
  catergoryName_lt: String
  catergoryName_lte: String
  catergoryName_gt: String
  catergoryName_gte: String
  catergoryName_contains: String
  catergoryName_not_contains: String
  catergoryName_starts_with: String
  catergoryName_not_starts_with: String
  catergoryName_ends_with: String
  catergoryName_not_ends_with: String
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

type Cust_hist {
  customer: Customer!
  order: Orders!
  prodcuct: Product!
}

type Cust_histConnection {
  pageInfo: PageInfo!
  edges: [Cust_histEdge]!
  aggregate: AggregateCust_hist!
}

input Cust_histCreateInput {
  customer: CustomerCreateOneInput!
  order: OrdersCreateOneInput!
  prodcuct: ProductCreateOneInput!
}

type Cust_histEdge {
  node: Cust_hist!
  cursor: String!
}

enum Cust_histOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Cust_histSubscriptionPayload {
  mutation: MutationType!
  node: Cust_hist
  updatedFields: [String!]
}

input Cust_histSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Cust_histWhereInput
  AND: [Cust_histSubscriptionWhereInput!]
  OR: [Cust_histSubscriptionWhereInput!]
  NOT: [Cust_histSubscriptionWhereInput!]
}

input Cust_histWhereInput {
  customer: CustomerWhereInput
  order: OrdersWhereInput
  prodcuct: ProductWhereInput
  AND: [Cust_histWhereInput!]
  OR: [Cust_histWhereInput!]
  NOT: [Cust_histWhereInput!]
}

type Customer {
  customerid: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String!
  city: String!
  state: String!
  zip: Int!
  country: String!
  region: Int!
  email: String!
  phone: Int!
  creditcardtype: Int!
  creditcard: String!
  creditcardexperation: String!
  username: String!
  password: String!
  age: Int!
  income: Int!
  gender: Int!
  orders: Orders!
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  customerid: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String!
  city: String!
  state: String!
  zip: Int!
  country: String!
  region: Int!
  email: String!
  phone: Int!
  creditcardtype: Int!
  creditcard: String!
  creditcardexperation: String!
  username: String!
  password: String!
  age: Int!
  income: Int!
  gender: Int!
  orders: OrdersCreateOneWithoutCustomerInput!
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
}

input CustomerCreateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
}

input CustomerCreateWithoutOrdersInput {
  customerid: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String!
  city: String!
  state: String!
  zip: Int!
  country: String!
  region: Int!
  email: String!
  phone: Int!
  creditcardtype: Int!
  creditcard: String!
  creditcardexperation: String!
  username: String!
  password: String!
  age: Int!
  income: Int!
  gender: Int!
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  customerid_ASC
  customerid_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  country_ASC
  country_DESC
  region_ASC
  region_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  creditcardtype_ASC
  creditcardtype_DESC
  creditcard_ASC
  creditcard_DESC
  creditcardexperation_ASC
  creditcardexperation_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  income_ASC
  income_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  customerid: ID!
  firstname: String!
  lastname: String!
  address1: String!
  address2: String!
  city: String!
  state: String!
  zip: Int!
  country: String!
  region: Int!
  email: String!
  phone: Int!
  creditcardtype: Int!
  creditcard: String!
  creditcardexperation: String!
  username: String!
  password: String!
  age: Int!
  income: Int!
  gender: Int!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateManyMutationInput {
  customerid: ID
  firstname: String
  lastname: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  country: String
  region: Int
  email: String
  phone: Int
  creditcardtype: Int
  creditcard: String
  creditcardexperation: String
  username: String
  password: String
  age: Int
  income: Int
  gender: Int
}

input CustomerWhereInput {
  customerid: ID
  customerid_not: ID
  customerid_in: [ID!]
  customerid_not_in: [ID!]
  customerid_lt: ID
  customerid_lte: ID
  customerid_gt: ID
  customerid_gte: ID
  customerid_contains: ID
  customerid_not_contains: ID
  customerid_starts_with: ID
  customerid_not_starts_with: ID
  customerid_ends_with: ID
  customerid_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  address1: String
  address1_not: String
  address1_in: [String!]
  address1_not_in: [String!]
  address1_lt: String
  address1_lte: String
  address1_gt: String
  address1_gte: String
  address1_contains: String
  address1_not_contains: String
  address1_starts_with: String
  address1_not_starts_with: String
  address1_ends_with: String
  address1_not_ends_with: String
  address2: String
  address2_not: String
  address2_in: [String!]
  address2_not_in: [String!]
  address2_lt: String
  address2_lte: String
  address2_gt: String
  address2_gte: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zip: Int
  zip_not: Int
  zip_in: [Int!]
  zip_not_in: [Int!]
  zip_lt: Int
  zip_lte: Int
  zip_gt: Int
  zip_gte: Int
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  region: Int
  region_not: Int
  region_in: [Int!]
  region_not_in: [Int!]
  region_lt: Int
  region_lte: Int
  region_gt: Int
  region_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: Int
  phone_not: Int
  phone_in: [Int!]
  phone_not_in: [Int!]
  phone_lt: Int
  phone_lte: Int
  phone_gt: Int
  phone_gte: Int
  creditcardtype: Int
  creditcardtype_not: Int
  creditcardtype_in: [Int!]
  creditcardtype_not_in: [Int!]
  creditcardtype_lt: Int
  creditcardtype_lte: Int
  creditcardtype_gt: Int
  creditcardtype_gte: Int
  creditcard: String
  creditcard_not: String
  creditcard_in: [String!]
  creditcard_not_in: [String!]
  creditcard_lt: String
  creditcard_lte: String
  creditcard_gt: String
  creditcard_gte: String
  creditcard_contains: String
  creditcard_not_contains: String
  creditcard_starts_with: String
  creditcard_not_starts_with: String
  creditcard_ends_with: String
  creditcard_not_ends_with: String
  creditcardexperation: String
  creditcardexperation_not: String
  creditcardexperation_in: [String!]
  creditcardexperation_not_in: [String!]
  creditcardexperation_lt: String
  creditcardexperation_lte: String
  creditcardexperation_gt: String
  creditcardexperation_gte: String
  creditcardexperation_contains: String
  creditcardexperation_not_contains: String
  creditcardexperation_starts_with: String
  creditcardexperation_not_starts_with: String
  creditcardexperation_ends_with: String
  creditcardexperation_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  income: Int
  income_not: Int
  income_in: [Int!]
  income_not_in: [Int!]
  income_lt: Int
  income_lte: Int
  income_gt: Int
  income_gte: Int
  gender: Int
  gender_not: Int
  gender_in: [Int!]
  gender_not_in: [Int!]
  gender_lt: Int
  gender_lte: Int
  gender_gt: Int
  gender_gte: Int
  orders: OrdersWhereInput
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

type Inventory {
  quan_in_stock: Int!
  sales: Int!
  product(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  quan_in_stock: Int!
  sales: Int!
  product: ProductCreateManyWithoutInventoryInput
}

input InventoryCreateOneWithoutProductInput {
  create: InventoryCreateWithoutProductInput
}

input InventoryCreateWithoutProductInput {
  quan_in_stock: Int!
  sales: Int!
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  quan_in_stock_ASC
  quan_in_stock_DESC
  sales_ASC
  sales_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  quan_in_stock: Int!
  sales: Int!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateManyMutationInput {
  quan_in_stock: Int
  sales: Int
}

input InventoryWhereInput {
  quan_in_stock: Int
  quan_in_stock_not: Int
  quan_in_stock_in: [Int!]
  quan_in_stock_not_in: [Int!]
  quan_in_stock_lt: Int
  quan_in_stock_lte: Int
  quan_in_stock_gt: Int
  quan_in_stock_gte: Int
  sales: Int
  sales_not: Int
  sales_in: [Int!]
  sales_not_in: [Int!]
  sales_lt: Int
  sales_lte: Int
  sales_gt: Int
  sales_gte: Int
  product_every: ProductWhereInput
  product_some: ProductWhereInput
  product_none: ProductWhereInput
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createCust_hist(data: Cust_histCreateInput!): Cust_hist!
  deleteManyCust_hists(where: Cust_histWhereInput): BatchPayload!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createOrderlines(data: OrderlinesCreateInput!): Orderlines!
  updateManyOrderlineses(data: OrderlinesUpdateManyMutationInput!, where: OrderlinesWhereInput): BatchPayload!
  deleteManyOrderlineses(where: OrderlinesWhereInput): BatchPayload!
  createOrders(data: OrdersCreateInput!): Orders!
  updateManyOrderses(data: OrdersUpdateManyMutationInput!, where: OrdersWhereInput): BatchPayload!
  deleteManyOrderses(where: OrdersWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createReorder(data: ReorderCreateInput!): Reorder!
  updateManyReorders(data: ReorderUpdateManyMutationInput!, where: ReorderWhereInput): BatchPayload!
  deleteManyReorders(where: ReorderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Orderlines {
  orderlinesid: ID!
  quantity: Int!
  orderdate: String!
  products: Product!
  orders: Orders!
}

type OrderlinesConnection {
  pageInfo: PageInfo!
  edges: [OrderlinesEdge]!
  aggregate: AggregateOrderlines!
}

input OrderlinesCreateInput {
  orderlinesid: ID!
  quantity: Int!
  orderdate: String!
  products: ProductCreateOneWithoutOrderlineInput!
  orders: OrdersCreateOneInput!
}

input OrderlinesCreateOneWithoutProductsInput {
  create: OrderlinesCreateWithoutProductsInput
}

input OrderlinesCreateWithoutProductsInput {
  orderlinesid: ID!
  quantity: Int!
  orderdate: String!
  orders: OrdersCreateOneInput!
}

type OrderlinesEdge {
  node: Orderlines!
  cursor: String!
}

enum OrderlinesOrderByInput {
  orderlinesid_ASC
  orderlinesid_DESC
  quantity_ASC
  quantity_DESC
  orderdate_ASC
  orderdate_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderlinesPreviousValues {
  orderlinesid: ID!
  quantity: Int!
  orderdate: String!
}

type OrderlinesSubscriptionPayload {
  mutation: MutationType!
  node: Orderlines
  updatedFields: [String!]
  previousValues: OrderlinesPreviousValues
}

input OrderlinesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderlinesWhereInput
  AND: [OrderlinesSubscriptionWhereInput!]
  OR: [OrderlinesSubscriptionWhereInput!]
  NOT: [OrderlinesSubscriptionWhereInput!]
}

input OrderlinesUpdateManyMutationInput {
  orderlinesid: ID
  quantity: Int
  orderdate: String
}

input OrderlinesWhereInput {
  orderlinesid: ID
  orderlinesid_not: ID
  orderlinesid_in: [ID!]
  orderlinesid_not_in: [ID!]
  orderlinesid_lt: ID
  orderlinesid_lte: ID
  orderlinesid_gt: ID
  orderlinesid_gte: ID
  orderlinesid_contains: ID
  orderlinesid_not_contains: ID
  orderlinesid_starts_with: ID
  orderlinesid_not_starts_with: ID
  orderlinesid_ends_with: ID
  orderlinesid_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  orderdate: String
  orderdate_not: String
  orderdate_in: [String!]
  orderdate_not_in: [String!]
  orderdate_lt: String
  orderdate_lte: String
  orderdate_gt: String
  orderdate_gte: String
  orderdate_contains: String
  orderdate_not_contains: String
  orderdate_starts_with: String
  orderdate_not_starts_with: String
  orderdate_ends_with: String
  orderdate_not_ends_with: String
  products: ProductWhereInput
  orders: OrdersWhereInput
  AND: [OrderlinesWhereInput!]
  OR: [OrderlinesWhereInput!]
  NOT: [OrderlinesWhereInput!]
}

type Orders {
  orderid: ID!
  orderdate: String!
  netamout: Float!
  tax: Float!
  totalamount: Float!
  customer: Customer
}

type OrdersConnection {
  pageInfo: PageInfo!
  edges: [OrdersEdge]!
  aggregate: AggregateOrders!
}

input OrdersCreateInput {
  orderid: ID!
  orderdate: String!
  netamout: Float!
  tax: Float!
  totalamount: Float!
  customer: CustomerCreateOneWithoutOrdersInput
}

input OrdersCreateOneInput {
  create: OrdersCreateInput
}

input OrdersCreateOneWithoutCustomerInput {
  create: OrdersCreateWithoutCustomerInput
}

input OrdersCreateWithoutCustomerInput {
  orderid: ID!
  orderdate: String!
  netamout: Float!
  tax: Float!
  totalamount: Float!
}

type OrdersEdge {
  node: Orders!
  cursor: String!
}

enum OrdersOrderByInput {
  orderid_ASC
  orderid_DESC
  orderdate_ASC
  orderdate_DESC
  netamout_ASC
  netamout_DESC
  tax_ASC
  tax_DESC
  totalamount_ASC
  totalamount_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrdersPreviousValues {
  orderid: ID!
  orderdate: String!
  netamout: Float!
  tax: Float!
  totalamount: Float!
}

type OrdersSubscriptionPayload {
  mutation: MutationType!
  node: Orders
  updatedFields: [String!]
  previousValues: OrdersPreviousValues
}

input OrdersSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrdersWhereInput
  AND: [OrdersSubscriptionWhereInput!]
  OR: [OrdersSubscriptionWhereInput!]
  NOT: [OrdersSubscriptionWhereInput!]
}

input OrdersUpdateManyMutationInput {
  orderid: ID
  orderdate: String
  netamout: Float
  tax: Float
  totalamount: Float
}

input OrdersWhereInput {
  orderid: ID
  orderid_not: ID
  orderid_in: [ID!]
  orderid_not_in: [ID!]
  orderid_lt: ID
  orderid_lte: ID
  orderid_gt: ID
  orderid_gte: ID
  orderid_contains: ID
  orderid_not_contains: ID
  orderid_starts_with: ID
  orderid_not_starts_with: ID
  orderid_ends_with: ID
  orderid_not_ends_with: ID
  orderdate: String
  orderdate_not: String
  orderdate_in: [String!]
  orderdate_not_in: [String!]
  orderdate_lt: String
  orderdate_lte: String
  orderdate_gt: String
  orderdate_gte: String
  orderdate_contains: String
  orderdate_not_contains: String
  orderdate_starts_with: String
  orderdate_not_starts_with: String
  orderdate_ends_with: String
  orderdate_not_ends_with: String
  netamout: Float
  netamout_not: Float
  netamout_in: [Float!]
  netamout_not_in: [Float!]
  netamout_lt: Float
  netamout_lte: Float
  netamout_gt: Float
  netamout_gte: Float
  tax: Float
  tax_not: Float
  tax_in: [Float!]
  tax_not_in: [Float!]
  tax_lt: Float
  tax_lte: Float
  tax_gt: Float
  tax_gte: Float
  totalamount: Float
  totalamount_not: Float
  totalamount_in: [Float!]
  totalamount_not_in: [Float!]
  totalamount_lt: Float
  totalamount_lte: Float
  totalamount_gt: Float
  totalamount_gte: Float
  customer: CustomerWhereInput
  AND: [OrdersWhereInput!]
  OR: [OrdersWhereInput!]
  NOT: [OrdersWhereInput!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  prod_id: ID!
  title: String!
  actor: String!
  price: Int!
  sepcial: Int!
  reorder: Reorder
  inventory: Inventory
  orderline: Orderlines
  category: Category
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  prod_id: ID!
  title: String!
  actor: String!
  price: Int!
  sepcial: Int!
  reorder: ReorderCreateOneWithoutProductInput
  inventory: InventoryCreateOneWithoutProductInput
  orderline: OrderlinesCreateOneWithoutProductsInput
  category: CategoryCreateOneInput
}

input ProductCreateManyWithoutInventoryInput {
  create: [ProductCreateWithoutInventoryInput!]
}

input ProductCreateManyWithoutReorderInput {
  create: [ProductCreateWithoutReorderInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
}

input ProductCreateOneWithoutOrderlineInput {
  create: ProductCreateWithoutOrderlineInput
}

input ProductCreateWithoutInventoryInput {
  prod_id: ID!
  title: String!
  actor: String!
  price: Int!
  sepcial: Int!
  reorder: ReorderCreateOneWithoutProductInput
  orderline: OrderlinesCreateOneWithoutProductsInput
  category: CategoryCreateOneInput
}

input ProductCreateWithoutOrderlineInput {
  prod_id: ID!
  title: String!
  actor: String!
  price: Int!
  sepcial: Int!
  reorder: ReorderCreateOneWithoutProductInput
  inventory: InventoryCreateOneWithoutProductInput
  category: CategoryCreateOneInput
}

input ProductCreateWithoutReorderInput {
  prod_id: ID!
  title: String!
  actor: String!
  price: Int!
  sepcial: Int!
  inventory: InventoryCreateOneWithoutProductInput
  orderline: OrderlinesCreateOneWithoutProductsInput
  category: CategoryCreateOneInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  prod_id_ASC
  prod_id_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  sepcial_ASC
  sepcial_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  prod_id: ID!
  title: String!
  actor: String!
  price: Int!
  sepcial: Int!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateManyMutationInput {
  prod_id: ID
  title: String
  actor: String
  price: Int
  sepcial: Int
}

input ProductWhereInput {
  prod_id: ID
  prod_id_not: ID
  prod_id_in: [ID!]
  prod_id_not_in: [ID!]
  prod_id_lt: ID
  prod_id_lte: ID
  prod_id_gt: ID
  prod_id_gte: ID
  prod_id_contains: ID
  prod_id_not_contains: ID
  prod_id_starts_with: ID
  prod_id_not_starts_with: ID
  prod_id_ends_with: ID
  prod_id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  sepcial: Int
  sepcial_not: Int
  sepcial_in: [Int!]
  sepcial_not_in: [Int!]
  sepcial_lt: Int
  sepcial_lte: Int
  sepcial_gt: Int
  sepcial_gte: Int
  reorder: ReorderWhereInput
  inventory: InventoryWhereInput
  orderline: OrderlinesWhereInput
  category: CategoryWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

type Query {
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  cust_hists(where: Cust_histWhereInput, orderBy: Cust_histOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cust_hist]!
  cust_histsConnection(where: Cust_histWhereInput, orderBy: Cust_histOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Cust_histConnection!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  orderlineses(where: OrderlinesWhereInput, orderBy: OrderlinesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orderlines]!
  orderlinesesConnection(where: OrderlinesWhereInput, orderBy: OrderlinesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderlinesConnection!
  orderses(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orders]!
  ordersesConnection(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrdersConnection!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  reorders(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reorder]!
  reordersConnection(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReorderConnection!
  node(id: ID!): Node
}

type Reorder {
  date_low: String!
  quan_low: Int!
  date_reordered: String!
  quan_reordered: Int!
  date_expected: String!
  product(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type ReorderConnection {
  pageInfo: PageInfo!
  edges: [ReorderEdge]!
  aggregate: AggregateReorder!
}

input ReorderCreateInput {
  date_low: String!
  quan_low: Int!
  date_reordered: String!
  quan_reordered: Int!
  date_expected: String!
  product: ProductCreateManyWithoutReorderInput
}

input ReorderCreateOneWithoutProductInput {
  create: ReorderCreateWithoutProductInput
}

input ReorderCreateWithoutProductInput {
  date_low: String!
  quan_low: Int!
  date_reordered: String!
  quan_reordered: Int!
  date_expected: String!
}

type ReorderEdge {
  node: Reorder!
  cursor: String!
}

enum ReorderOrderByInput {
  date_low_ASC
  date_low_DESC
  quan_low_ASC
  quan_low_DESC
  date_reordered_ASC
  date_reordered_DESC
  quan_reordered_ASC
  quan_reordered_DESC
  date_expected_ASC
  date_expected_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReorderPreviousValues {
  date_low: String!
  quan_low: Int!
  date_reordered: String!
  quan_reordered: Int!
  date_expected: String!
}

type ReorderSubscriptionPayload {
  mutation: MutationType!
  node: Reorder
  updatedFields: [String!]
  previousValues: ReorderPreviousValues
}

input ReorderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReorderWhereInput
  AND: [ReorderSubscriptionWhereInput!]
  OR: [ReorderSubscriptionWhereInput!]
  NOT: [ReorderSubscriptionWhereInput!]
}

input ReorderUpdateManyMutationInput {
  date_low: String
  quan_low: Int
  date_reordered: String
  quan_reordered: Int
  date_expected: String
}

input ReorderWhereInput {
  date_low: String
  date_low_not: String
  date_low_in: [String!]
  date_low_not_in: [String!]
  date_low_lt: String
  date_low_lte: String
  date_low_gt: String
  date_low_gte: String
  date_low_contains: String
  date_low_not_contains: String
  date_low_starts_with: String
  date_low_not_starts_with: String
  date_low_ends_with: String
  date_low_not_ends_with: String
  quan_low: Int
  quan_low_not: Int
  quan_low_in: [Int!]
  quan_low_not_in: [Int!]
  quan_low_lt: Int
  quan_low_lte: Int
  quan_low_gt: Int
  quan_low_gte: Int
  date_reordered: String
  date_reordered_not: String
  date_reordered_in: [String!]
  date_reordered_not_in: [String!]
  date_reordered_lt: String
  date_reordered_lte: String
  date_reordered_gt: String
  date_reordered_gte: String
  date_reordered_contains: String
  date_reordered_not_contains: String
  date_reordered_starts_with: String
  date_reordered_not_starts_with: String
  date_reordered_ends_with: String
  date_reordered_not_ends_with: String
  quan_reordered: Int
  quan_reordered_not: Int
  quan_reordered_in: [Int!]
  quan_reordered_not_in: [Int!]
  quan_reordered_lt: Int
  quan_reordered_lte: Int
  quan_reordered_gt: Int
  quan_reordered_gte: Int
  date_expected: String
  date_expected_not: String
  date_expected_in: [String!]
  date_expected_not_in: [String!]
  date_expected_lt: String
  date_expected_lte: String
  date_expected_gt: String
  date_expected_gte: String
  date_expected_contains: String
  date_expected_not_contains: String
  date_expected_starts_with: String
  date_expected_not_starts_with: String
  date_expected_ends_with: String
  date_expected_not_ends_with: String
  product_every: ProductWhereInput
  product_some: ProductWhereInput
  product_none: ProductWhereInput
  AND: [ReorderWhereInput!]
  OR: [ReorderWhereInput!]
  NOT: [ReorderWhereInput!]
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  cust_hist(where: Cust_histSubscriptionWhereInput): Cust_histSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  orderlines(where: OrderlinesSubscriptionWhereInput): OrderlinesSubscriptionPayload
  orders(where: OrdersSubscriptionWhereInput): OrdersSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  reorder(where: ReorderSubscriptionWhereInput): ReorderSubscriptionPayload
}
`
      }
    