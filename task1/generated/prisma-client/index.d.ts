// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  orders: (where?: OrdersWhereInput) => Promise<boolean>;
  products: (where?: ProductsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryPromise;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Category>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  customers: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Customer>;
  customersConnection: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CustomerConnectionPromise;
  orders: (where: OrdersWhereUniqueInput) => OrdersPromise;
  orderses: (
    args?: {
      where?: OrdersWhereInput;
      orderBy?: OrdersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Orders>;
  ordersesConnection: (
    args?: {
      where?: OrdersWhereInput;
      orderBy?: OrdersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrdersConnectionPromise;
  products: (where: ProductsWhereUniqueInput) => ProductsPromise;
  productses: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Products>;
  productsesConnection: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => CategoryPromise;
  updateManyCategories: (
    args: { data: CategoryUpdateManyMutationInput; where?: CategoryWhereInput }
  ) => BatchPayloadPromise;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (
    args: { data: CustomerUpdateInput; where: CustomerWhereUniqueInput }
  ) => CustomerPromise;
  updateManyCustomers: (
    args: { data: CustomerUpdateManyMutationInput; where?: CustomerWhereInput }
  ) => BatchPayloadPromise;
  upsertCustomer: (
    args: {
      where: CustomerWhereUniqueInput;
      create: CustomerCreateInput;
      update: CustomerUpdateInput;
    }
  ) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createOrders: (data: OrdersCreateInput) => OrdersPromise;
  updateOrders: (
    args: { data: OrdersUpdateInput; where: OrdersWhereUniqueInput }
  ) => OrdersPromise;
  updateManyOrderses: (
    args: { data: OrdersUpdateManyMutationInput; where?: OrdersWhereInput }
  ) => BatchPayloadPromise;
  upsertOrders: (
    args: {
      where: OrdersWhereUniqueInput;
      create: OrdersCreateInput;
      update: OrdersUpdateInput;
    }
  ) => OrdersPromise;
  deleteOrders: (where: OrdersWhereUniqueInput) => OrdersPromise;
  deleteManyOrderses: (where?: OrdersWhereInput) => BatchPayloadPromise;
  createProducts: (data: ProductsCreateInput) => ProductsPromise;
  updateProducts: (
    args: { data: ProductsUpdateInput; where: ProductsWhereUniqueInput }
  ) => ProductsPromise;
  updateManyProductses: (
    args: { data: ProductsUpdateManyMutationInput; where?: ProductsWhereInput }
  ) => BatchPayloadPromise;
  upsertProducts: (
    args: {
      where: ProductsWhereUniqueInput;
      create: ProductsCreateInput;
      update: ProductsUpdateInput;
    }
  ) => ProductsPromise;
  deleteProducts: (where: ProductsWhereUniqueInput) => ProductsPromise;
  deleteManyProductses: (where?: ProductsWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  orders: (
    where?: OrdersSubscriptionWhereInput
  ) => OrdersSubscriptionPayloadSubscription;
  products: (
    where?: ProductsSubscriptionWhereInput
  ) => ProductsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "address1_ASC"
  | "address1_DESC"
  | "address2_ASC"
  | "address2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "country_ASC"
  | "country_DESC"
  | "region_ASC"
  | "region_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "creditcardtype_ASC"
  | "creditcardtype_DESC"
  | "creditcard_ASC"
  | "creditcard_DESC"
  | "creditcardexpiration_ASC"
  | "creditcardexpiration_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "income_ASC"
  | "income_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "categoryname_ASC"
  | "categoryname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrdersOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "orderdate_ASC"
  | "orderdate_DESC"
  | "netamount_ASC"
  | "netamount_DESC"
  | "tax_ASC"
  | "tax_DESC"
  | "totalamount_ASC"
  | "totalamount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "actor_ASC"
  | "actor_DESC"
  | "price_ASC"
  | "price_DESC"
  | "special_ASC"
  | "special_DESC"
  | "common_prod_id_ASC"
  | "common_prod_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface OrdersUpdateManyMutationInput {
  orderdate?: DateTimeInput;
  netamount?: Float;
  tax?: Float;
  totalamount?: Float;
}

export interface CategoryUpdateInput {
  categoryname?: String;
}

export interface OrdersWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  orderdate?: DateTimeInput;
  orderdate_not?: DateTimeInput;
  orderdate_in?: DateTimeInput[] | DateTimeInput;
  orderdate_not_in?: DateTimeInput[] | DateTimeInput;
  orderdate_lt?: DateTimeInput;
  orderdate_lte?: DateTimeInput;
  orderdate_gt?: DateTimeInput;
  orderdate_gte?: DateTimeInput;
  customerid?: CustomerWhereInput;
  netamount?: Float;
  netamount_not?: Float;
  netamount_in?: Float[] | Float;
  netamount_not_in?: Float[] | Float;
  netamount_lt?: Float;
  netamount_lte?: Float;
  netamount_gt?: Float;
  netamount_gte?: Float;
  tax?: Float;
  tax_not?: Float;
  tax_in?: Float[] | Float;
  tax_not_in?: Float[] | Float;
  tax_lt?: Float;
  tax_lte?: Float;
  tax_gt?: Float;
  tax_gte?: Float;
  totalamount?: Float;
  totalamount_not?: Float;
  totalamount_in?: Float[] | Float;
  totalamount_not_in?: Float[] | Float;
  totalamount_lt?: Float;
  totalamount_lte?: Float;
  totalamount_gt?: Float;
  totalamount_gte?: Float;
  AND?: OrdersWhereInput[] | OrdersWhereInput;
  OR?: OrdersWhereInput[] | OrdersWhereInput;
  NOT?: OrdersWhereInput[] | OrdersWhereInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  categoryname?: String;
  categoryname_not?: String;
  categoryname_in?: String[] | String;
  categoryname_not_in?: String[] | String;
  categoryname_lt?: String;
  categoryname_lte?: String;
  categoryname_gt?: String;
  categoryname_gte?: String;
  categoryname_contains?: String;
  categoryname_not_contains?: String;
  categoryname_starts_with?: String;
  categoryname_not_starts_with?: String;
  categoryname_ends_with?: String;
  categoryname_not_ends_with?: String;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface CustomerUpdateOneInput {
  create?: CustomerCreateInput;
  update?: CustomerUpdateDataInput;
  upsert?: CustomerUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CustomerWhereUniqueInput;
}

export interface CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface OrdersUpdateInput {
  orderdate?: DateTimeInput;
  customerid?: CustomerUpdateOneInput;
  netamount?: Float;
  tax?: Float;
  totalamount?: Float;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CustomerCreateOneInput {
  create?: CustomerCreateInput;
  connect?: CustomerWhereUniqueInput;
}

export interface ProductsUpdateInput {
  category?: CategoryUpdateOneInput;
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
}

export type ProductsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CustomerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CustomerWhereInput;
  AND?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  OR?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  NOT?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
}

export interface OrdersCreateInput {
  orderdate?: DateTimeInput;
  customerid?: CustomerCreateOneInput;
  netamount: Float;
  tax: Float;
  totalamount: Float;
}

export interface ProductsCreateInput {
  category?: CategoryCreateOneInput;
  title: String;
  actor: String;
  price: Float;
  special: Float;
  common_prod_id?: Int;
}

export interface ProductsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  category?: CategoryWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  actor?: String;
  actor_not?: String;
  actor_in?: String[] | String;
  actor_not_in?: String[] | String;
  actor_lt?: String;
  actor_lte?: String;
  actor_gt?: String;
  actor_gte?: String;
  actor_contains?: String;
  actor_not_contains?: String;
  actor_starts_with?: String;
  actor_not_starts_with?: String;
  actor_ends_with?: String;
  actor_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  special?: Float;
  special_not?: Float;
  special_in?: Float[] | Float;
  special_not_in?: Float[] | Float;
  special_lt?: Float;
  special_lte?: Float;
  special_gt?: Float;
  special_gte?: Float;
  common_prod_id?: Int;
  common_prod_id_not?: Int;
  common_prod_id_in?: Int[] | Int;
  common_prod_id_not_in?: Int[] | Int;
  common_prod_id_lt?: Int;
  common_prod_id_lte?: Int;
  common_prod_id_gt?: Int;
  common_prod_id_gte?: Int;
  AND?: ProductsWhereInput[] | ProductsWhereInput;
  OR?: ProductsWhereInput[] | ProductsWhereInput;
  NOT?: ProductsWhereInput[] | ProductsWhereInput;
}

export type OrdersWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrdersSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrdersWhereInput;
  AND?: OrdersSubscriptionWhereInput[] | OrdersSubscriptionWhereInput;
  OR?: OrdersSubscriptionWhereInput[] | OrdersSubscriptionWhereInput;
  NOT?: OrdersSubscriptionWhereInput[] | OrdersSubscriptionWhereInput;
}

export interface CustomerUpdateDataInput {
  firstname?: String;
  lastname?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  zip?: String;
  country?: String;
  region?: String;
  email?: String;
  phone?: Int;
  creditcardtype?: String;
  creditcard?: String;
  creditcardexpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Float;
  gender?: String;
}

export interface CustomerUpdateManyMutationInput {
  firstname?: String;
  lastname?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  zip?: String;
  country?: String;
  region?: String;
  email?: String;
  phone?: Int;
  creditcardtype?: String;
  creditcard?: String;
  creditcardexpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Float;
  gender?: String;
}

export interface CategoryUpdateDataInput {
  categoryname?: String;
}

export interface CustomerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstname?: String;
  firstname_not?: String;
  firstname_in?: String[] | String;
  firstname_not_in?: String[] | String;
  firstname_lt?: String;
  firstname_lte?: String;
  firstname_gt?: String;
  firstname_gte?: String;
  firstname_contains?: String;
  firstname_not_contains?: String;
  firstname_starts_with?: String;
  firstname_not_starts_with?: String;
  firstname_ends_with?: String;
  firstname_not_ends_with?: String;
  lastname?: String;
  lastname_not?: String;
  lastname_in?: String[] | String;
  lastname_not_in?: String[] | String;
  lastname_lt?: String;
  lastname_lte?: String;
  lastname_gt?: String;
  lastname_gte?: String;
  lastname_contains?: String;
  lastname_not_contains?: String;
  lastname_starts_with?: String;
  lastname_not_starts_with?: String;
  lastname_ends_with?: String;
  lastname_not_ends_with?: String;
  address1?: String;
  address1_not?: String;
  address1_in?: String[] | String;
  address1_not_in?: String[] | String;
  address1_lt?: String;
  address1_lte?: String;
  address1_gt?: String;
  address1_gte?: String;
  address1_contains?: String;
  address1_not_contains?: String;
  address1_starts_with?: String;
  address1_not_starts_with?: String;
  address1_ends_with?: String;
  address1_not_ends_with?: String;
  address2?: String;
  address2_not?: String;
  address2_in?: String[] | String;
  address2_not_in?: String[] | String;
  address2_lt?: String;
  address2_lte?: String;
  address2_gt?: String;
  address2_gte?: String;
  address2_contains?: String;
  address2_not_contains?: String;
  address2_starts_with?: String;
  address2_not_starts_with?: String;
  address2_ends_with?: String;
  address2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  region?: String;
  region_not?: String;
  region_in?: String[] | String;
  region_not_in?: String[] | String;
  region_lt?: String;
  region_lte?: String;
  region_gt?: String;
  region_gte?: String;
  region_contains?: String;
  region_not_contains?: String;
  region_starts_with?: String;
  region_not_starts_with?: String;
  region_ends_with?: String;
  region_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  creditcardtype?: String;
  creditcardtype_not?: String;
  creditcardtype_in?: String[] | String;
  creditcardtype_not_in?: String[] | String;
  creditcardtype_lt?: String;
  creditcardtype_lte?: String;
  creditcardtype_gt?: String;
  creditcardtype_gte?: String;
  creditcardtype_contains?: String;
  creditcardtype_not_contains?: String;
  creditcardtype_starts_with?: String;
  creditcardtype_not_starts_with?: String;
  creditcardtype_ends_with?: String;
  creditcardtype_not_ends_with?: String;
  creditcard?: String;
  creditcard_not?: String;
  creditcard_in?: String[] | String;
  creditcard_not_in?: String[] | String;
  creditcard_lt?: String;
  creditcard_lte?: String;
  creditcard_gt?: String;
  creditcard_gte?: String;
  creditcard_contains?: String;
  creditcard_not_contains?: String;
  creditcard_starts_with?: String;
  creditcard_not_starts_with?: String;
  creditcard_ends_with?: String;
  creditcard_not_ends_with?: String;
  creditcardexpiration?: String;
  creditcardexpiration_not?: String;
  creditcardexpiration_in?: String[] | String;
  creditcardexpiration_not_in?: String[] | String;
  creditcardexpiration_lt?: String;
  creditcardexpiration_lte?: String;
  creditcardexpiration_gt?: String;
  creditcardexpiration_gte?: String;
  creditcardexpiration_contains?: String;
  creditcardexpiration_not_contains?: String;
  creditcardexpiration_starts_with?: String;
  creditcardexpiration_not_starts_with?: String;
  creditcardexpiration_ends_with?: String;
  creditcardexpiration_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  income?: Float;
  income_not?: Float;
  income_in?: Float[] | Float;
  income_not_in?: Float[] | Float;
  income_lt?: Float;
  income_lte?: Float;
  income_gt?: Float;
  income_gte?: Float;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  AND?: CustomerWhereInput[] | CustomerWhereInput;
  OR?: CustomerWhereInput[] | CustomerWhereInput;
  NOT?: CustomerWhereInput[] | CustomerWhereInput;
}

export interface CategoryCreateInput {
  categoryname: String;
}

export interface CategoryUpdateManyMutationInput {
  categoryname?: String;
}

export interface CustomerCreateInput {
  firstname: String;
  lastname: String;
  address1: String;
  address2: String;
  city: String;
  state: String;
  zip: String;
  country: String;
  region: String;
  email: String;
  phone?: Int;
  creditcardtype: String;
  creditcard: String;
  creditcardexpiration: String;
  username: String;
  password: String;
  age: Int;
  income: Float;
  gender: String;
}

export interface CustomerUpdateInput {
  firstname?: String;
  lastname?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  zip?: String;
  country?: String;
  region?: String;
  email?: String;
  phone?: Int;
  creditcardtype?: String;
  creditcard?: String;
  creditcardexpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Float;
  gender?: String;
}

export interface CategoryCreateOneInput {
  create?: CategoryCreateInput;
  connect?: CategoryWhereUniqueInput;
}

export interface CategoryUpdateOneInput {
  create?: CategoryCreateInput;
  update?: CategoryUpdateDataInput;
  upsert?: CategoryUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CategoryWhereUniqueInput;
}

export interface ProductsUpdateManyMutationInput {
  title?: String;
  actor?: String;
  price?: Float;
  special?: Float;
  common_prod_id?: Int;
}

export interface CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput;
  create: CustomerCreateInput;
}

export interface ProductsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductsWhereInput;
  AND?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  OR?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  NOT?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Customer {
  id: ID_Output;
  firstname: String;
  lastname: String;
  address1: String;
  address2: String;
  city: String;
  state: String;
  zip: String;
  country: String;
  region: String;
  email: String;
  phone?: Int;
  creditcardtype: String;
  creditcard: String;
  creditcardexpiration: String;
  username: String;
  password: String;
  age: Int;
  income: Float;
  gender: String;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  country: () => Promise<String>;
  region: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  creditcardtype: () => Promise<String>;
  creditcard: () => Promise<String>;
  creditcardexpiration: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  income: () => Promise<Float>;
  gender: () => Promise<String>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  creditcardtype: () => Promise<AsyncIterator<String>>;
  creditcard: () => Promise<AsyncIterator<String>>;
  creditcardexpiration: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Float>>;
  gender: () => Promise<AsyncIterator<String>>;
}

export interface ProductsPreviousValues {
  id: ID_Output;
  title: String;
  actor: String;
  price: Float;
  special: Float;
  common_prod_id?: Int;
}

export interface ProductsPreviousValuesPromise
  extends Promise<ProductsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Float>;
  common_prod_id: () => Promise<Int>;
}

export interface ProductsPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Float>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
}

export interface Category {
  id: ID_Output;
  categoryname: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  categoryname: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryname: () => Promise<AsyncIterator<String>>;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  address1: String;
  address2: String;
  city: String;
  state: String;
  zip: String;
  country: String;
  region: String;
  email: String;
  phone?: Int;
  creditcardtype: String;
  creditcard: String;
  creditcardexpiration: String;
  username: String;
  password: String;
  age: Int;
  income: Float;
  gender: String;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  country: () => Promise<String>;
  region: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  creditcardtype: () => Promise<String>;
  creditcard: () => Promise<String>;
  creditcardexpiration: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  income: () => Promise<Float>;
  gender: () => Promise<String>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  creditcardtype: () => Promise<AsyncIterator<String>>;
  creditcard: () => Promise<AsyncIterator<String>>;
  creditcardexpiration: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Float>>;
  gender: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProducts {
  count: Int;
}

export interface AggregateProductsPromise
  extends Promise<AggregateProducts>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductsSubscription
  extends Promise<AsyncIterator<AggregateProducts>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductsConnection {
  pageInfo: PageInfo;
  edges: ProductsEdge[];
}

export interface ProductsConnectionPromise
  extends Promise<ProductsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductsEdge>>() => T;
  aggregate: <T = AggregateProductsPromise>() => T;
}

export interface ProductsConnectionSubscription
  extends Promise<AsyncIterator<ProductsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductsSubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrders {
  count: Int;
}

export interface AggregateOrdersPromise
  extends Promise<AggregateOrders>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrdersSubscription
  extends Promise<AsyncIterator<AggregateOrders>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrdersPreviousValues {
  id: ID_Output;
  orderdate?: DateTimeOutput;
  netamount: Float;
  tax: Float;
  totalamount: Float;
}

export interface OrdersPreviousValuesPromise
  extends Promise<OrdersPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderdate: () => Promise<DateTimeOutput>;
  netamount: () => Promise<Float>;
  tax: () => Promise<Float>;
  totalamount: () => Promise<Float>;
}

export interface OrdersPreviousValuesSubscription
  extends Promise<AsyncIterator<OrdersPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  netamount: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
}

export interface OrdersConnection {
  pageInfo: PageInfo;
  edges: OrdersEdge[];
}

export interface OrdersConnectionPromise
  extends Promise<OrdersConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrdersEdge>>() => T;
  aggregate: <T = AggregateOrdersPromise>() => T;
}

export interface OrdersConnectionSubscription
  extends Promise<AsyncIterator<OrdersConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrdersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrdersSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Orders {
  id: ID_Output;
  orderdate?: DateTimeOutput;
  netamount: Float;
  tax: Float;
  totalamount: Float;
}

export interface OrdersPromise extends Promise<Orders>, Fragmentable {
  id: () => Promise<ID_Output>;
  orderdate: () => Promise<DateTimeOutput>;
  customerid: <T = CustomerPromise>() => T;
  netamount: () => Promise<Float>;
  tax: () => Promise<Float>;
  totalamount: () => Promise<Float>;
}

export interface OrdersSubscription
  extends Promise<AsyncIterator<Orders>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  customerid: <T = CustomerSubscription>() => T;
  netamount: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductsEdge {
  node: Products;
  cursor: String;
}

export interface ProductsEdgePromise
  extends Promise<ProductsEdge>,
    Fragmentable {
  node: <T = ProductsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductsEdgeSubscription
  extends Promise<AsyncIterator<ProductsEdge>>,
    Fragmentable {
  node: <T = ProductsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface OrdersSubscriptionPayload {
  mutation: MutationType;
  node: Orders;
  updatedFields: String[];
  previousValues: OrdersPreviousValues;
}

export interface OrdersSubscriptionPayloadPromise
  extends Promise<OrdersSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrdersPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrdersPreviousValuesPromise>() => T;
}

export interface OrdersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrdersSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrdersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrdersPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  categoryname: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  categoryname: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryname: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface Products {
  id: ID_Output;
  title: String;
  actor: String;
  price: Float;
  special: Float;
  common_prod_id?: Int;
}

export interface ProductsPromise extends Promise<Products>, Fragmentable {
  id: () => Promise<ID_Output>;
  category: <T = CategoryPromise>() => T;
  title: () => Promise<String>;
  actor: () => Promise<String>;
  price: () => Promise<Float>;
  special: () => Promise<Float>;
  common_prod_id: () => Promise<Int>;
}

export interface ProductsSubscription
  extends Promise<AsyncIterator<Products>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: <T = CategorySubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  special: () => Promise<AsyncIterator<Float>>;
  common_prod_id: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductsSubscriptionPayload {
  mutation: MutationType;
  node: Products;
  updatedFields: String[];
  previousValues: ProductsPreviousValues;
}

export interface ProductsSubscriptionPayloadPromise
  extends Promise<ProductsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductsPreviousValuesPromise>() => T;
}

export interface ProductsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductsPreviousValuesSubscription>() => T;
}

export interface OrdersEdge {
  node: Orders;
  cursor: String;
}

export interface OrdersEdgePromise extends Promise<OrdersEdge>, Fragmentable {
  node: <T = OrdersPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrdersEdgeSubscription
  extends Promise<AsyncIterator<OrdersEdge>>,
    Fragmentable {
  node: <T = OrdersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Orders",
    embedded: false
  },
  {
    name: "Products",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
